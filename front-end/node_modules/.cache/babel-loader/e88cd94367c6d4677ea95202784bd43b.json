{"ast":null,"code":"var _jsxFileName = \"/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/App.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header/Header\";\nimport Sidebar from \"./components/Sidebar/Sidebar\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Mail from \"./components/Mail/Mail\";\nimport EmailList from \"./components/EmailList/EmailList\";\nimport SendMail from \"./components/SendMail/SendMail\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectSendMessageIsOpen } from \"./features/mailSlice\";\nimport { selectUser } from \"./features/userSlice\";\nimport Login from \"./components/Login/Login\"; // import { db } from \"./firebase\";\n\nimport InboxIDs from \"./components/api/InboxList\";\nimport { userData, displayEmails } from \"./features/dataSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const sendMessageIsOpen = useSelector(selectSendMessageIsOpen);\n  const user = useSelector(selectUser);\n  const dispatch = useDispatch();\n  const [emailListIDs, setEmailListIDs] = useState([]);\n  const [emailGathered, setEmailGathered] = useState([]);\n  console.log(\"Checking App component\");\n  useEffect(() => {\n    // db.collection(\"emails\")\n    //   .orderBy(\"timestamp\", \"desc\")\n    //   .onSnapshot((snapshot) =>\n    //     setEmails(\n    //       snapshot.docs.map((doc) => ({\n    //         id: doc.id,\n    //         data: doc.data(),\n    //       }))\n    //     )\n    //   );\n    if (user) {\n      InboxIDs(user).get(`/${user.user_id}/messages?labelIds=INBOX&maxResults=2`).then(res => {\n        dispatch(userData(res.data));\n        setEmailListIDs(res.data.messages);\n      }).catch(error => {\n        console.error(error);\n      });\n    }\n  }, [user]);\n  useEffect(() => {\n    if (emailListIDs.length > 0) {\n      emailListIDs.map(Emailid => InboxIDs(user).get(`/${user.user_id}/messages/${Emailid.id}`).then(res => {\n        const setting = res.data;\n        setEmailGathered(emailGathered => [...emailGathered, setting]);\n      }).catch(error => {\n        console.error(error);\n      }));\n      return () => {}; //console.log(\"my effect is destroying\");\n    }\n  }, [emailListIDs]);\n  useEffect(_s(() => {\n    var _Emails$payload$data$;\n\n    _s();\n\n    var Emails = useSelector(displayEmails);\n    var emailsToDisplay = (_Emails$payload$data$ = Emails.payload.data.emailData) === null || _Emails$payload$data$ === void 0 ? void 0 : _Emails$payload$data$.emailGathered;\n    dispatch(displayEmails({\n      emailGathered\n    }));\n  }, \"9xUYiV2T/E3Ll5chVV0+wzZSQGk=\", false, function () {\n    return [useSelector];\n  }), [emailGathered]);\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: !user ? /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app-body\",\n        children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n          emails: emailsToDisplay\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Switch, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            path: \"/mail\",\n            children: /*#__PURE__*/_jsxDEV(Mail, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/\",\n            exact: true,\n            children: /*#__PURE__*/_jsxDEV(EmailList, {\n              emailGathered: emailsToDisplay\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this), sendMessageIsOpen && /*#__PURE__*/_jsxDEV(SendMail, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(App, \"w4fqsORYmUayTlLk7/xOE9sL9nE=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Header","Sidebar","BrowserRouter","Router","Switch","Route","Mail","EmailList","SendMail","useSelector","useDispatch","selectSendMessageIsOpen","selectUser","Login","InboxIDs","userData","displayEmails","App","sendMessageIsOpen","user","dispatch","emailListIDs","setEmailListIDs","emailGathered","setEmailGathered","console","log","get","user_id","then","res","data","messages","catch","error","length","map","Emailid","id","setting","Emails","emailsToDisplay","payload","emailData"],"sources":["/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header/Header\";\nimport Sidebar from \"./components/Sidebar/Sidebar\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Mail from \"./components/Mail/Mail\";\nimport EmailList from \"./components/EmailList/EmailList\";\nimport SendMail from \"./components/SendMail/SendMail\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectSendMessageIsOpen } from \"./features/mailSlice\";\nimport { selectUser } from \"./features/userSlice\";\nimport Login from \"./components/Login/Login\";\n// import { db } from \"./firebase\";\nimport InboxIDs from \"./components/api/InboxList\";\nimport { userData, displayEmails } from \"./features/dataSlice\";\n\nfunction App() {\n  const sendMessageIsOpen = useSelector(selectSendMessageIsOpen);\n  const user = useSelector(selectUser);\n\n  const dispatch = useDispatch();\n\n  const [emailListIDs, setEmailListIDs] = useState([]);\n\n  const [emailGathered, setEmailGathered] = useState([]);\n\n  console.log(\"Checking App component\");\n  useEffect(() => {\n    // db.collection(\"emails\")\n    //   .orderBy(\"timestamp\", \"desc\")\n    //   .onSnapshot((snapshot) =>\n    //     setEmails(\n    //       snapshot.docs.map((doc) => ({\n    //         id: doc.id,\n    //         data: doc.data(),\n    //       }))\n    //     )\n    //   );\n    if (user) {\n      InboxIDs(user)\n        .get(`/${user.user_id}/messages?labelIds=INBOX&maxResults=2`)\n        .then((res) => {\n          dispatch(userData(res.data));\n          setEmailListIDs(res.data.messages);\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n    }\n  }, [user]);\n\n  useEffect(() => {\n    if (emailListIDs.length > 0) {\n      emailListIDs.map((Emailid) =>\n        InboxIDs(user)\n          .get(`/${user.user_id}/messages/${Emailid.id}`)\n          .then((res) => {\n            const setting = res.data;\n            setEmailGathered((emailGathered) => [...emailGathered, setting]);\n          })\n          .catch((error) => {\n            console.error(error);\n          })\n      );\n\n      return () => {}; //console.log(\"my effect is destroying\");\n    }\n  }, [emailListIDs]);\n  useEffect(() => {\n    var Emails = useSelector(displayEmails);\n\n    var emailsToDisplay = Emails.payload.data.emailData?.emailGathered;\n\n    dispatch(displayEmails({ emailGathered }));\n  }, [emailGathered]);\n  return (\n    <Router>\n      {!user ? (\n        <Login />\n      ) : (\n        <div className=\"app\">\n          <Header />\n          <div className=\"app-body\">\n            <Sidebar emails={emailsToDisplay} />\n            <Switch>\n              <Route path=\"/mail\">\n                <Mail />\n              </Route>\n              <Route path=\"/\" exact>\n                <EmailList emailGathered={emailsToDisplay} />\n              </Route>\n            </Switch>\n          </div>\n\n          {sendMessageIsOpen && <SendMail />}\n        </div>\n      )}\n    </Router>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}