{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar LOOKUP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\nvar MAX_CHUNK_LENGTH = 16383; // must be multiple of 3\n\nvar tripletToBase64 = function tripletToBase64(num) {\n  return LOOKUP[num >> 18 & 0x3F] + LOOKUP[num >> 12 & 0x3F] + LOOKUP[num >> 6 & 0x3F] + LOOKUP[num & 0x3F];\n};\n\nfunction encodeChunk(uint8, start, end) {\n  var output = '';\n\n  for (var i = start; i < end; i += 3) {\n    output += tripletToBase64((uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2]);\n  }\n\n  return output;\n}\n\nvar str2arr = function str2arr(str) {\n  return new Uint8Array(str.split('').map(function (char) {\n    return char.charCodeAt(0);\n  }));\n};\n\nfunction encode(data) {\n  var len = data.length;\n  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes\n\n  var output = ''; // go through the array every three bytes, we'll deal with trailing stuff later\n\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += MAX_CHUNK_LENGTH) {\n    output += encodeChunk(data, i, i + MAX_CHUNK_LENGTH > len2 ? len2 : i + MAX_CHUNK_LENGTH);\n  } // pad the end with zeros, but make sure to not forget the extra bytes\n\n\n  if (extraBytes === 1) {\n    var tmp = data[len - 1];\n    output += LOOKUP[tmp >> 2];\n    output += LOOKUP[tmp << 4 & 0x3F];\n    output += '==';\n  } else if (extraBytes === 2) {\n    var _tmp = (data[len - 2] << 8) + data[len - 1];\n\n    output += LOOKUP[_tmp >> 10];\n    output += LOOKUP[_tmp >> 4 & 0x3F];\n    output += LOOKUP[_tmp << 2 & 0x3F];\n    output += '=';\n  }\n\n  return output;\n}\n\nexports.default = function (data) {\n  return typeof data === 'string' ? encode(str2arr(data)) : encode(data);\n};","map":{"version":3,"mappings":";;;;;AAAA,IAAMA,SAAS,mEAAmEC,KAAnE,CAAyE,EAAzE,CAAf;AACA,IAAMC,mBAAmB,KAAzB,C,CAA+B;;AAE/B,IAAMC,kBAAkB,SAAlBA,eAAkB;EAAA,OAAOH,OAAOI,OAAO,EAAPA,GAAY,IAAnBJ,IAA2BA,OAAOI,OAAO,EAAPA,GAAY,IAAnBJ,CAA3BA,GAAsDA,OAAOI,OAAO,CAAPA,GAAW,IAAlBJ,CAAtDA,GAAgFA,OAAOI,MAAM,IAAbJ,CAAvF;AAAxB;;AAEA,SAASK,WAAT,CAAsBC,KAAtB,EAA6BC,KAA7B,EAAoCC,GAApC,EAAyC;EACvC,IAAIC,SAAS,EAAb;;EACA,KAAK,IAAIC,IAAIH,KAAb,EAAoBG,IAAIF,GAAxB,EAA6BE,KAAK,CAAlC,EAAqC;IACnCD,UAAUN,gBAAgB,CAACG,MAAMI,CAANJ,KAAY,EAAb,KAAoBA,MAAMI,IAAI,CAAVJ,KAAgB,CAApC,IAA0CA,MAAMI,IAAI,CAAVJ,CAA1DH,CAAVM;EACD;;EACD,OAAOA,MAAP;AACD;;AAED,IAAME,UAAU,SAAVA,OAAU;EAAA,OAAO,IAAIC,UAAJ,CAAeC,IAAIZ,KAAJY,CAAU,EAAVA,EAAcC,GAAdD,CAAkB;IAAA,OAAQE,KAAKC,UAALD,CAAgB,CAAhBA,CAAR;EAAlB,EAAf,CAAP;AAAhB;;AAEA,SAASE,MAAT,CAAiBC,IAAjB,EAAuB;EACrB,IAAMC,MAAMD,KAAKE,MAAjB;EACA,IAAMC,aAAaF,MAAM,CAAzB,CAFqB,CAEM;;EAC3B,IAAIV,SAAS,EAAb,CAHqB,CAKrB;;EACA,KAAK,IAAIC,IAAI,CAAR,EAAWY,OAAOH,MAAME,UAA7B,EAAyCX,IAAIY,IAA7C,EAAmDZ,KAAKR,gBAAxD,EAA0E;IACxEO,UAAUJ,YAAYa,IAAZb,EAAkBK,CAAlBL,EAAsBK,IAAIR,gBAAJQ,GAAwBY,IAAxBZ,GAA+BY,IAA/BZ,GAAuCA,IAAIR,gBAAjEG,CAAVI;EACD,CARoB,CAUrB;;;EACA,IAAIY,eAAe,CAAnB,EAAsB;IACpB,IAAME,MAAML,KAAKC,MAAM,CAAXD,CAAZ;IACAT,UAAUT,OAAOuB,OAAO,CAAdvB,CAAVS;IACAA,UAAUT,OAAQuB,OAAO,CAAPA,GAAY,IAApBvB,CAAVS;IACAA,UAAU,IAAVA;EAJF,OAKO,IAAIY,eAAe,CAAnB,EAAsB;IAC3B,IAAME,OAAM,CAACL,KAAKC,MAAM,CAAXD,KAAiB,CAAlB,IAAwBA,KAAKC,MAAM,CAAXD,CAApC;;IACAT,UAAUT,OAAOuB,QAAO,EAAdvB,CAAVS;IACAA,UAAUT,OAAQuB,QAAO,CAAPA,GAAY,IAApBvB,CAAVS;IACAA,UAAUT,OAAQuB,QAAO,CAAPA,GAAY,IAApBvB,CAAVS;IACAA,UAAU,GAAVA;EACD;;EAED,OAAOA,MAAP;AACD;;kBAEc;EAAA,OAAQ,OAAOS,IAAP,KAAgB,QAAhB,GAA2BD,OAAON,QAAQO,IAARP,CAAPM,CAA3B,GAAmDA,OAAOC,IAAPD,CAA3D","names":["LOOKUP","split","MAX_CHUNK_LENGTH","tripletToBase64","num","encodeChunk","uint8","start","end","output","i","str2arr","Uint8Array","str","map","char","charCodeAt","encode","data","len","length","extraBytes","len2","tmp"],"sources":["../src/base64-encode.js"],"sourcesContent":["const LOOKUP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('')\nconst MAX_CHUNK_LENGTH = 16383 // must be multiple of 3\n\nconst tripletToBase64 = num => LOOKUP[num >> 18 & 0x3F] + LOOKUP[num >> 12 & 0x3F] + LOOKUP[num >> 6 & 0x3F] + LOOKUP[num & 0x3F]\n\nfunction encodeChunk (uint8, start, end) {\n  let output = ''\n  for (let i = start; i < end; i += 3) {\n    output += tripletToBase64((uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]))\n  }\n  return output\n}\n\nconst str2arr = str => new Uint8Array(str.split('').map(char => char.charCodeAt(0)))\n\nfunction encode (data) {\n  const len = data.length\n  const extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  let output = ''\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (let i = 0, len2 = len - extraBytes; i < len2; i += MAX_CHUNK_LENGTH) {\n    output += encodeChunk(data, i, (i + MAX_CHUNK_LENGTH) > len2 ? len2 : (i + MAX_CHUNK_LENGTH))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    const tmp = data[len - 1]\n    output += LOOKUP[tmp >> 2]\n    output += LOOKUP[(tmp << 4) & 0x3F]\n    output += '=='\n  } else if (extraBytes === 2) {\n    const tmp = (data[len - 2] << 8) + (data[len - 1])\n    output += LOOKUP[tmp >> 10]\n    output += LOOKUP[(tmp >> 4) & 0x3F]\n    output += LOOKUP[(tmp << 2) & 0x3F]\n    output += '='\n  }\n\n  return output\n}\n\nexport default data => typeof data === 'string' ? encode(str2arr(data)) : encode(data)\n"]},"metadata":{},"sourceType":"script"}