{"ast":null,"code":"import * as React from 'react';\n\nvar isCheckBoxInput = element => element.type === 'checkbox';\n\nvar isDateObject = data => data instanceof Date;\n\nvar isNullOrUndefined = value => value == null;\n\nconst isObjectType = value => typeof value === 'object';\n\nvar isObject = value => !isNullOrUndefined(value) && !Array.isArray(value) && isObjectType(value) && !isDateObject(value);\n\nvar getControllerValue = event => isObject(event) && event.target ? isCheckBoxInput(event.target) ? event.target.checked : event.target.value : event;\n\nvar getNodeParentName = name => name.substring(0, name.search(/.\\d/)) || name;\n\nvar isNameInFieldArray = (names, name) => [...names].some(current => getNodeParentName(name) === current);\n\nvar compact = value => value.filter(Boolean);\n\nvar isUndefined = val => val === undefined;\n\nvar get = (obj, path, defaultValue) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], obj);\n    return isUndefined(result) || result === obj ? isUndefined(obj[path]) ? defaultValue : obj[path] : result;\n  }\n\n  return undefined;\n};\n\nconst EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change'\n};\nconst VALIDATION_MODE = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all'\n};\nconst INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate'\n};\n\nvar omit = (source, key) => {\n  const copy = Object.assign({}, source);\n  delete copy[key];\n  return copy;\n};\n\nconst FormContext = React.createContext(null);\nFormContext.displayName = 'RHFContext';\n\nconst useFormContext = () => React.useContext(FormContext);\n\nconst FormProvider = props => React.createElement(FormContext.Provider, {\n  value: omit(props, 'children')\n}, props.children);\n\nvar getProxyFormState = function (isProxyEnabled, formState, readFormStateRef, localReadFormStateRef) {\n  let isRoot = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n  return isProxyEnabled ? new Proxy(formState, {\n    get: (obj, prop) => {\n      if (prop in obj) {\n        if (readFormStateRef.current[prop] !== VALIDATION_MODE.all) {\n          readFormStateRef.current[prop] = isRoot ? VALIDATION_MODE.all : true;\n        }\n\n        localReadFormStateRef && (localReadFormStateRef.current[prop] = true);\n        return obj[prop];\n      }\n\n      return undefined;\n    }\n  }) : formState;\n};\n\nvar isEmptyObject = value => isObject(value) && !Object.keys(value).length;\n\nvar shouldRenderFormState = (formStateData, readFormStateRef, isRoot) => {\n  const formState = omit(formStateData, 'name');\n  return isEmptyObject(formState) || Object.keys(formState).length >= Object.keys(readFormStateRef).length || Object.keys(formState).find(key => readFormStateRef[key] === (isRoot ? VALIDATION_MODE.all : true));\n};\n\nvar convertToArrayPayload = value => Array.isArray(value) ? value : [value];\n\nvar isWeb = typeof window !== 'undefined' && typeof window.HTMLElement !== 'undefined' && typeof document !== 'undefined';\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== 'undefined';\n\nfunction useFormState(props) {\n  const {\n    control,\n    name\n  } = props || {};\n  const methods = useFormContext();\n  const {\n    formStateRef,\n    subjectsRef,\n    readFormStateRef\n  } = control || methods.control;\n  const nameRef = React.useRef(name);\n  nameRef.current = name;\n  const [formState, updateFormState] = React.useState(formStateRef.current);\n  const readFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false\n  });\n  React.useEffect(() => {\n    const formStateSubscription = subjectsRef.current.state.subscribe({\n      next: formState => (!nameRef.current || !formState.name || convertToArrayPayload(nameRef.current).includes(formState.name)) && shouldRenderFormState(formState, readFormState.current) && updateFormState(Object.assign(Object.assign({}, formStateRef.current), formState))\n    });\n    return () => formStateSubscription.unsubscribe();\n  }, []);\n  return getProxyFormState(isProxyEnabled, formState, readFormStateRef, readFormState, false);\n}\n\nfunction useController(_ref) {\n  let {\n    name,\n    rules,\n    defaultValue,\n    control,\n    shouldUnregister\n  } = _ref;\n  const methods = useFormContext();\n  const {\n    defaultValuesRef,\n    register,\n    fieldsRef,\n    unregister,\n    namesRef,\n    subjectsRef,\n    shouldUnmount,\n    inFieldArrayActionRef\n  } = control || methods.control;\n  const field = get(fieldsRef.current, name);\n  const [value, setInputStateValue] = React.useState(field && field._f && !isUndefined(field._f.value) ? field._f.value : isUndefined(get(defaultValuesRef.current, name)) ? defaultValue : get(defaultValuesRef.current, name));\n  const {\n    onChange,\n    onBlur,\n    ref\n  } = register(name, Object.assign(Object.assign({}, rules), {\n    value\n  }));\n  const formState = useFormState({\n    control: control || methods.control,\n    name\n  });\n\n  function updateIsMounted(name, value) {\n    const field = get(fieldsRef.current, name);\n\n    if (field && field._f) {\n      field._f.mount = value;\n    }\n  }\n\n  React.useEffect(() => {\n    const controllerSubscription = subjectsRef.current.control.subscribe({\n      next: data => (!data.name || name === data.name) && setInputStateValue(get(data.values, name))\n    });\n    updateIsMounted(name, true);\n    return () => {\n      controllerSubscription.unsubscribe();\n      const shouldUnmountField = shouldUnmount || shouldUnregister;\n\n      if (isNameInFieldArray(namesRef.current.array, name) ? shouldUnmountField && !inFieldArrayActionRef.current : shouldUnmountField) {\n        unregister(name);\n      } else {\n        updateIsMounted(name, false);\n      }\n    };\n  }, [name]);\n  return {\n    field: {\n      onChange: event => {\n        const value = getControllerValue(event);\n        setInputStateValue(value);\n        onChange({\n          target: {\n            value,\n            name: name\n          },\n          type: EVENTS.CHANGE\n        });\n      },\n      onBlur: () => {\n        onBlur({\n          target: {\n            name: name\n          },\n          type: EVENTS.BLUR\n        });\n      },\n      name,\n      value,\n      ref: elm => elm && ref({\n        focus: () => elm.focus && elm.focus(),\n        setCustomValidity: message => elm.setCustomValidity(message),\n        reportValidity: () => elm.reportValidity()\n      })\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name)\n    }\n  };\n}\n\nconst Controller = props => props.render(useController(props));\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria ? Object.assign(Object.assign({}, errors[name]), {\n  types: Object.assign(Object.assign({}, errors[name] && errors[name].types ? errors[name].types : {}), {\n    [type]: message || true\n  })\n}) : {};\n\nvar isKey = value => /^\\w*$/.test(value);\n\nvar stringToPath = input => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nfunction set(object, path, value) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue = isObject(objValue) || Array.isArray(objValue) ? objValue : !isNaN(+tempPath[index + 1]) ? [] : {};\n    }\n\n    object[key] = newValue;\n    object = object[key];\n  }\n\n  return object;\n}\n\nconst focusFieldBy = (fields, callback, fieldsNames) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nconst getFieldsValues = function (fieldsRef) {\n  let output = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  for (const name in fieldsRef.current) {\n    const field = fieldsRef.current[name];\n\n    if (field && !isNullOrUndefined(output)) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n      set(output, name, _f && _f.ref ? _f.ref.disabled || _f.refs && _f.refs.every(ref => ref.disabled) ? undefined : _f.value : Array.isArray(field) ? [] : {});\n      current && getFieldsValues({\n        current\n      }, output[name]);\n    }\n  }\n\n  return output;\n};\n\nvar generateId = () => {\n  const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n    return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);\n  });\n};\n\nvar mapIds = function () {\n  let values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let keyName = arguments.length > 1 ? arguments[1] : undefined;\n  return values.map(value => Object.assign({\n    [keyName]: value && value[keyName] || generateId()\n  }, value));\n};\n\nvar isPrimitive = value => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2, isErrorObject) {\n  if (isPrimitive(object1) || isPrimitive(object2) || isDateObject(object1) || isDateObject(object2)) {\n    return object1 === object2;\n  }\n\n  if (!React.isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    for (const key of keys1) {\n      const val1 = object1[key];\n\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n\n        if ((isObject(val1) || Array.isArray(val1)) && (isObject(val2) || Array.isArray(val2)) ? !deepEqual(val1, val2, isErrorObject) : val1 !== val2) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction deepMerge(target, source) {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] = isObject(targetValue) && isObject(sourceValue) || Array.isArray(targetValue) && Array.isArray(sourceValue) ? deepMerge(targetValue, sourceValue) : sourceValue;\n    } catch (_a) {}\n  }\n\n  return target;\n}\n\nfunction setDirtyFields(values, defaultValues, dirtyFields, parentNode, parentName) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(values[index][key], get(defaultValues[index] || {}, key, []), dirtyFields[index][key], dirtyFields[index], key);\n      } else {\n        !isNullOrUndefined(defaultValues) && deepEqual(get(defaultValues[index] || {}, key), values[index][key]) ? set(dirtyFields[index] || {}, key) : dirtyFields[index] = Object.assign(Object.assign({}, dirtyFields[index]), {\n          [key]: true\n        });\n      }\n    }\n\n    parentNode && !dirtyFields.length && delete parentNode[parentName];\n  }\n\n  return dirtyFields;\n}\n\nvar setFieldArrayDirtyFields = (values, defaultValues, dirtyFields) => deepMerge(setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)), setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)));\n\nfunction append(data, value) {\n  return [...convertToArrayPayload(data), ...convertToArrayPayload(value)];\n}\n\nvar fillEmptyArray = value => Array.isArray(value) ? Array(value.length).fill(undefined) : undefined;\n\nfunction insert(data, index, value) {\n  return [...data.slice(0, index), ...convertToArrayPayload(value), ...data.slice(index)];\n}\n\nvar moveArrayAt = (data, from, to) => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n\nfunction prepend(data, value) {\n  return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\n}\n\nfunction removeAtIndexes(data, indexes) {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nvar removeArrayAt = (data, index) => isUndefined(index) ? [] : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\n  data[indexA] = [data[indexB], data[indexB] = data[indexA]][0];\n};\n\nvar isBoolean = value => typeof value === 'boolean';\n\nfunction baseGet(object, updatePath) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nfunction unset(object, path) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject = updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (currentPathsLength === index && (isObject(objectRef) && isEmptyObject(objectRef) || Array.isArray(objectRef) && !objectRef.filter(data => isObject(data) && !isEmptyObject(data) || isBoolean(data)).length)) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n\nconst useFieldArray = _ref2 => {\n  let {\n    control,\n    name,\n    keyName = 'id',\n    shouldUnregister\n  } = _ref2;\n  const methods = useFormContext();\n  const focusNameRef = React.useRef('');\n  const isMountedRef = React.useRef(false);\n  const {\n    getIsDirty,\n    namesRef,\n    fieldsRef,\n    defaultValuesRef,\n    formStateRef,\n    subjectsRef,\n    readFormStateRef,\n    updateIsValid,\n    fieldArrayDefaultValuesRef,\n    unregister,\n    shouldUnmount,\n    inFieldArrayActionRef,\n    setValues,\n    register\n  } = control || methods.control;\n  const [fields, setFields] = React.useState(mapIds((get(fieldsRef.current, name) && isMountedRef.current ? get(getFieldsValues(fieldsRef), name) : get(fieldArrayDefaultValuesRef.current, getNodeParentName(name)) ? get(fieldArrayDefaultValuesRef.current, name) : get(defaultValuesRef.current, name)) || [], keyName));\n  set(fieldArrayDefaultValuesRef.current, name, [...fields]);\n  namesRef.current.array.add(name);\n\n  const omitKey = fields => fields.map(function () {\n    let field = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return omit(field, keyName);\n  });\n\n  const getCurrentFieldsValues = () => {\n    const values = get(getFieldsValues(fieldsRef), name, []);\n    return mapIds(get(fieldArrayDefaultValuesRef.current, name, []).map((item, index) => Object.assign(Object.assign({}, item), values[index])), keyName);\n  };\n\n  const getFocusFieldName = (index, options) => options && !options.shouldFocus ? options.focusName || `${name}.${options.focusIndex}.` : `${name}.${index}.`;\n\n  const setFieldsAndNotify = function () {\n    let fieldsValues = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    return setFields(mapIds(fieldsValues, keyName));\n  };\n\n  const cleanup = ref => !compact(get(ref, name, [])).length && unset(ref, name);\n\n  const batchStateUpdate = function (method, args) {\n    let updatedFieldArrayValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    let shouldSet = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    inFieldArrayActionRef.current = true;\n\n    if (get(fieldsRef.current, name)) {\n      const output = method(get(fieldsRef.current, name), args.argA, args.argB);\n      shouldSet && set(fieldsRef.current, name, output);\n    }\n\n    if (Array.isArray(get(formStateRef.current.errors, name))) {\n      const output = method(get(formStateRef.current.errors, name), args.argA, args.argB);\n      shouldSet && set(formStateRef.current.errors, name, output);\n      cleanup(formStateRef.current.errors);\n    }\n\n    if (readFormStateRef.current.touchedFields && get(formStateRef.current.touchedFields, name)) {\n      const output = method(get(formStateRef.current.touchedFields, name), args.argA, args.argB);\n      shouldSet && set(formStateRef.current.touchedFields, name, output);\n      cleanup(formStateRef.current.touchedFields);\n    }\n\n    if (readFormStateRef.current.dirtyFields || readFormStateRef.current.isDirty) {\n      set(formStateRef.current.dirtyFields, name, setFieldArrayDirtyFields(omitKey(updatedFieldArrayValues), get(defaultValuesRef.current, name, []), get(formStateRef.current.dirtyFields, name, [])));\n      updatedFieldArrayValues && set(formStateRef.current.dirtyFields, name, setFieldArrayDirtyFields(omitKey(updatedFieldArrayValues), get(defaultValuesRef.current, name, []), get(formStateRef.current.dirtyFields, name, [])));\n      cleanup(formStateRef.current.dirtyFields);\n    }\n\n    subjectsRef.current.state.next({\n      dirtyFields: formStateRef.current.dirtyFields,\n      isDirty: getIsDirty(name, omitKey(updatedFieldArrayValues)),\n      errors: formStateRef.current.errors,\n      isValid: formStateRef.current.isValid\n    });\n  };\n\n  const registerFieldArray = function (values) {\n    let index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let parentName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n    return values.forEach((appendValueItem, valueIndex) => {\n      const rootName = `${parentName || name}.${parentName ? valueIndex : index + valueIndex}`;\n      isPrimitive(appendValueItem) ? register(rootName, {\n        value: appendValueItem\n      }) : Object.entries(appendValueItem).forEach(_ref3 => {\n        let [key, value] = _ref3;\n        const inputName = rootName + '.' + key;\n        Array.isArray(value) ? registerFieldArray(value, valueIndex, inputName) : register(inputName, {\n          value\n        });\n      });\n    });\n  };\n\n  const append$1 = (value, options) => {\n    const appendValue = convertToArrayPayload(value);\n    const updatedFieldArrayValues = append(getCurrentFieldsValues(), appendValue);\n    const currentIndex = updatedFieldArrayValues.length - appendValue.length;\n    setFieldsAndNotify(updatedFieldArrayValues);\n    batchStateUpdate(append, {\n      argA: fillEmptyArray(value)\n    }, updatedFieldArrayValues, false);\n    registerFieldArray(appendValue, currentIndex);\n    focusNameRef.current = getFocusFieldName(currentIndex, options);\n  };\n\n  const prepend$1 = (value, options) => {\n    const prependValue = convertToArrayPayload(value);\n    const updatedFieldArrayValues = prepend(getCurrentFieldsValues(), prependValue);\n    setFieldsAndNotify(updatedFieldArrayValues);\n    batchStateUpdate(prepend, {\n      argA: fillEmptyArray(value)\n    }, updatedFieldArrayValues);\n    registerFieldArray(prependValue);\n    focusNameRef.current = getFocusFieldName(0, options);\n  };\n\n  const remove = index => {\n    const updatedFieldArrayValues = removeArrayAt(getCurrentFieldsValues(), index);\n    setFieldsAndNotify(updatedFieldArrayValues);\n    batchStateUpdate(removeArrayAt, {\n      argA: index\n    }, updatedFieldArrayValues);\n  };\n\n  const insert$1 = (index, value, options) => {\n    const insertValue = convertToArrayPayload(value);\n    const updatedFieldArrayValues = insert(getCurrentFieldsValues(), index, insertValue);\n    setFieldsAndNotify(updatedFieldArrayValues);\n    batchStateUpdate(insert, {\n      argA: index,\n      argB: fillEmptyArray(value)\n    }, updatedFieldArrayValues);\n    registerFieldArray(insertValue, index);\n    focusNameRef.current = getFocusFieldName(index, options);\n  };\n\n  const swap = (indexA, indexB) => {\n    const fieldValues = getCurrentFieldsValues();\n    swapArrayAt(fieldValues, indexA, indexB);\n    batchStateUpdate(swapArrayAt, {\n      argA: indexA,\n      argB: indexB\n    }, fieldValues, false);\n    setFieldsAndNotify(fieldValues);\n  };\n\n  const move = (from, to) => {\n    const fieldValues = getCurrentFieldsValues();\n    moveArrayAt(fieldValues, from, to);\n    setFieldsAndNotify(fieldValues);\n    batchStateUpdate(moveArrayAt, {\n      argA: from,\n      argB: to\n    }, fieldValues, false);\n  };\n\n  const update = (index, value) => {\n    setValues(name + '.' + index, value, {\n      shouldValidate: !!readFormStateRef.current.isValid,\n      shouldDirty: !!(readFormStateRef.current.dirtyFields || readFormStateRef.current.isDirty)\n    });\n    const fieldValues = getCurrentFieldsValues();\n    fieldValues[index] = value;\n    setFieldsAndNotify(fieldValues);\n  };\n\n  React.useEffect(() => {\n    inFieldArrayActionRef.current = false;\n\n    if (namesRef.current.watchAll) {\n      subjectsRef.current.state.next({});\n    } else {\n      for (const watchField of namesRef.current.watch) {\n        if (name.startsWith(watchField)) {\n          subjectsRef.current.state.next({});\n          break;\n        }\n      }\n    }\n\n    subjectsRef.current.watch.next({\n      name,\n      values: getFieldsValues(fieldsRef)\n    });\n    focusNameRef.current && focusFieldBy(fieldsRef.current, key => key.startsWith(focusNameRef.current));\n    focusNameRef.current = '';\n    subjectsRef.current.array.next({\n      name,\n      values: omitKey([...fields])\n    });\n    readFormStateRef.current.isValid && updateIsValid();\n  }, [fields, name]);\n  React.useEffect(() => {\n    const fieldArraySubscription = subjectsRef.current.array.subscribe({\n      next(_ref4) {\n        let {\n          name: inputFieldArrayName,\n          values,\n          isReset\n        } = _ref4;\n\n        if (isReset) {\n          unset(fieldsRef.current, inputFieldArrayName || name);\n          inputFieldArrayName ? set(fieldArrayDefaultValuesRef.current, inputFieldArrayName, values) : fieldArrayDefaultValuesRef.current = values;\n          setFieldsAndNotify(get(fieldArrayDefaultValuesRef.current, name));\n        }\n      }\n\n    });\n    !get(fieldsRef.current, name) && set(fieldsRef.current, name, []);\n    isMountedRef.current = true;\n    return () => {\n      fieldArraySubscription.unsubscribe();\n\n      if (shouldUnmount || shouldUnregister) {\n        unregister(name);\n        unset(fieldArrayDefaultValuesRef.current, name);\n      } else {\n        const fieldArrayValues = get(getFieldsValues(fieldsRef), name);\n        fieldArrayValues && set(fieldArrayDefaultValuesRef.current, name, fieldArrayValues);\n      }\n    };\n  }, []);\n  return {\n    swap: React.useCallback(swap, [name]),\n    move: React.useCallback(move, [name]),\n    prepend: React.useCallback(prepend$1, [name]),\n    append: React.useCallback(append$1, [name]),\n    remove: React.useCallback(remove, [name]),\n    insert: React.useCallback(insert$1, [name]),\n    update: React.useCallback(update, [name]),\n    fields: fields\n  };\n};\n\nvar isFileInput = element => element.type === 'file';\n\nvar isMultipleSelect = element => element.type === `select-multiple`;\n\nvar isRadioInput = element => element.type === 'radio';\n\nconst defaultResult = {\n  value: false,\n  isValid: false\n};\nconst validResult = {\n  value: true,\n  isValid: true\n};\n\nvar getCheckboxValue = options => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options.filter(option => option && option.checked && !option.disabled).map(option => option.value);\n      return {\n        value: values,\n        isValid: !!values.length\n      };\n    }\n\n    return options[0].checked && !options[0].disabled ? // @ts-expect-error expected to work in the browser\n    options[0].attributes && !isUndefined(options[0].attributes.value) ? isUndefined(options[0].value) || options[0].value === '' ? validResult : {\n      value: options[0].value,\n      isValid: true\n    } : validResult : defaultResult;\n  }\n\n  return defaultResult;\n};\n\nvar getFieldValueAs = (value, _ref5) => {\n  let {\n    valueAsNumber,\n    valueAsDate,\n    setValueAs\n  } = _ref5;\n  return isUndefined(value) ? value : valueAsNumber ? value === '' ? NaN : +value : valueAsDate ? new Date(value) : setValueAs ? setValueAs(value) : value;\n};\n\nvar getMultipleSelectValue = options => [...options].filter(_ref6 => {\n  let {\n    selected\n  } = _ref6;\n  return selected;\n}).map(_ref7 => {\n  let {\n    value\n  } = _ref7;\n  return value;\n});\n\nconst defaultReturn = {\n  isValid: false,\n  value: null\n};\n\nvar getRadioValue = options => Array.isArray(options) ? options.reduce((previous, option) => option && option.checked && !option.disabled ? {\n  isValid: true,\n  value: option.value\n} : previous, defaultReturn) : defaultReturn;\n\nfunction getFieldValue(field) {\n  if (field && field._f) {\n    const ref = field._f.ref;\n\n    if (ref.disabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field._f.refs).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBoxInput(ref)) {\n      return getCheckboxValue(field._f.refs).value;\n    }\n\n    return getFieldValueAs(isUndefined(ref.value) ? field._f.ref.value : ref.value, field._f);\n  }\n}\n\nvar getResolverOptions = (fieldsNames, fieldsRefs, criteriaMode, shouldUseNativeValidation) => {\n  const fields = {};\n\n  for (const name of fieldsNames) {\n    const field = get(fieldsRefs, name);\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames],\n    fields,\n    shouldUseNativeValidation\n  };\n};\n\nvar hasValidation = (options, mounted) => mounted && options && (options.required || options.min || options.max || options.maxLength || options.minLength || options.pattern || options.validate);\n\nvar skipValidation = _ref8 => {\n  let {\n    isOnBlur,\n    isOnChange,\n    isOnTouch,\n    isTouched,\n    isReValidateOnBlur,\n    isReValidateOnChange,\n    isBlurEvent,\n    isSubmitted,\n    isOnAll\n  } = _ref8;\n\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n\n  return true;\n};\n\nvar isFunction = value => typeof value === 'function';\n\nvar isString = value => typeof value === 'string';\n\nvar isMessage = value => isString(value) || React.isValidElement(value);\n\nvar isRegex = value => value instanceof RegExp;\n\nfunction getValidateError(result, ref) {\n  let type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'validate';\n\n  if (isMessage(result) || Array.isArray(result) && result.every(isMessage) || isBoolean(result) && !result) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref\n    };\n  }\n}\n\nvar getValueAndMessage = validationData => isObject(validationData) && !isRegex(validationData) ? validationData : {\n  value: validationData,\n  message: ''\n};\n\nvar validateField = async (_ref9, validateAllFieldCriteria, shouldUseNativeValidation) => {\n  let {\n    _f: {\n      ref,\n      refs,\n      required,\n      maxLength,\n      minLength,\n      min,\n      max,\n      pattern,\n      validate,\n      name,\n      value: inputValue,\n      valueAsNumber,\n      mount\n    }\n  } = _ref9;\n\n  if (!mount) {\n    return {};\n  }\n\n  const inputRef = refs ? refs[0] : ref;\n\n  const setCustomValidty = message => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n\n  const error = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = (valueAsNumber || isFileInput(ref)) && !ref.value || inputValue === '' || Array.isArray(inputValue) && !inputValue.length;\n  const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n\n  const getMinMaxMessage = function (exceedMax, maxLengthMessage, minLengthMessage) {\n    let maxType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : INPUT_VALIDATION_RULES.maxLength;\n    let minType = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : INPUT_VALIDATION_RULES.minLength;\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = Object.assign({\n      type: exceedMax ? maxType : minType,\n      message,\n      ref\n    }, appendErrorsCurry(exceedMax ? maxType : minType, message));\n  };\n\n  if (required && (!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue)) || isBoolean(inputValue) && !inputValue || isCheckBox && !getCheckboxValue(refs).isValid || isRadio && !getRadioValue(refs).isValid)) {\n    const {\n      value,\n      message\n    } = isMessage(required) ? {\n      value: !!required,\n      message: required\n    } : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = Object.assign({\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef\n      }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, message));\n\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber = ref.valueAsNumber || parseFloat(inputValue);\n\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate = ref.valueAsDate || new Date(inputValue);\n\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name].message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax = !isNullOrUndefined(maxLengthOutput.value) && inputValue.length > maxLengthOutput.value;\n    const exceedMin = !isNullOrUndefined(minLengthOutput.value) && inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\n\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name].message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const {\n      value: patternValue,\n      message\n    } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = Object.assign({\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref\n      }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message));\n\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\n\n        if (!validateAllFieldCriteria) {\n          setCustomValidty(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {};\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(await validate[key](inputValue), inputRef, key);\n\n        if (validateError) {\n          validationResult = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));\n          setCustomValidty(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = Object.assign({\n          ref: inputRef\n        }, validationResult);\n\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidty(true);\n  return error;\n};\n\nvar debounce = (callback, wait) => {\n  let timer = 0;\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    clearTimeout(timer);\n    timer = setTimeout(() => callback(...args), wait);\n  };\n};\n\nvar getValidationModes = mode => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched\n});\n\nvar isHTMLElement = value => value instanceof HTMLElement;\n\nvar isRadioOrCheckboxFunction = ref => isRadioInput(ref) || isCheckBoxInput(ref);\n\nclass Subscription {\n  constructor() {\n    this.tearDowns = [];\n  }\n\n  add(tearDown) {\n    this.tearDowns.push(tearDown);\n  }\n\n  unsubscribe() {\n    for (const teardown of this.tearDowns) {\n      teardown();\n    }\n\n    this.tearDowns = [];\n  }\n\n}\n\nclass Subscriber {\n  constructor(observer, subscription) {\n    this.observer = observer;\n    this.closed = false;\n    subscription.add(() => this.closed = true);\n  }\n\n  next(value) {\n    if (!this.closed) {\n      this.observer.next(value);\n    }\n  }\n\n}\n\nclass Subject {\n  constructor() {\n    this.observers = [];\n  }\n\n  next(value) {\n    for (const observer of this.observers) {\n      observer.next(value);\n    }\n  }\n\n  subscribe(observer) {\n    const subscription = new Subscription();\n    const subscriber = new Subscriber(observer, subscription);\n    this.observers.push(subscriber);\n    return subscription;\n  }\n\n  unsubscribe() {\n    this.observers = [];\n  }\n\n}\n\nconst isWindowUndefined = typeof window === 'undefined';\n\nfunction useForm() {\n  let {\n    mode = VALIDATION_MODE.onSubmit,\n    reValidateMode = VALIDATION_MODE.onChange,\n    resolver,\n    context,\n    defaultValues = {},\n    shouldFocusError = true,\n    delayError,\n    shouldUseNativeValidation,\n    shouldUnregister,\n    criteriaMode\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const [formState, updateFormState] = React.useState({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {}\n  });\n  const readFormStateRef = React.useRef({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touchedFields: !isProxyEnabled,\n    isValidating: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n    errors: !isProxyEnabled\n  });\n  const resolverRef = React.useRef(resolver);\n  const formStateRef = React.useRef(formState);\n  const fieldsRef = React.useRef({});\n  const defaultValuesRef = React.useRef(defaultValues);\n  const fieldArrayDefaultValuesRef = React.useRef({});\n  const contextRef = React.useRef(context);\n  const inFieldArrayActionRef = React.useRef(false);\n  const isMountedRef = React.useRef(false);\n\n  const _delayCallback = React.useRef();\n\n  const subjectsRef = React.useRef({\n    watch: new Subject(),\n    control: new Subject(),\n    array: new Subject(),\n    state: new Subject()\n  });\n  const namesRef = React.useRef({\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n    watchAll: false\n  });\n  const validationMode = getValidationModes(mode);\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  resolverRef.current = resolver;\n  contextRef.current = context;\n\n  const isFieldWatched = name => namesRef.current.watchAll || namesRef.current.watch.has(name) || namesRef.current.watch.has((name.match(/\\w+/) || [])[0]);\n\n  const updateErrorState = (name, error) => {\n    set(formStateRef.current.errors, name, error);\n    subjectsRef.current.state.next({\n      errors: formStateRef.current.errors\n    });\n  };\n\n  const shouldRenderBaseOnError = React.useCallback(async (shouldSkipRender, name, error, fieldState, isValidFromResolver, isWatched) => {\n    const previousError = get(formStateRef.current.errors, name);\n    const isValid = readFormStateRef.current.isValid ? resolver ? isValidFromResolver : await validateForm(fieldsRef.current, true) : false;\n\n    if (delayError && error) {\n      _delayCallback.current = _delayCallback.current || debounce(updateErrorState, delayError);\n\n      _delayCallback.current(name, error);\n    } else {\n      error ? set(formStateRef.current.errors, name, error) : unset(formStateRef.current.errors, name);\n    }\n\n    if ((isWatched || (error ? !deepEqual(previousError, error, true) : previousError) || !isEmptyObject(fieldState) || formStateRef.current.isValid !== isValid) && !shouldSkipRender) {\n      const updatedFormState = Object.assign(Object.assign({}, fieldState), {\n        isValid: !!isValid,\n        errors: formStateRef.current.errors,\n        name\n      });\n      formStateRef.current = Object.assign(Object.assign({}, formStateRef.current), updatedFormState);\n      subjectsRef.current.state.next(isWatched ? {\n        name\n      } : updatedFormState);\n    }\n\n    subjectsRef.current.state.next({\n      isValidating: false\n    });\n  }, []);\n  const setFieldValue = React.useCallback(function (name, rawValue) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let shouldRender = arguments.length > 3 ? arguments[3] : undefined;\n    let shouldRegister = arguments.length > 4 ? arguments[4] : undefined;\n    shouldRegister && register(name);\n    const field = get(fieldsRef.current, name);\n\n    if (field) {\n      const _f = field._f;\n\n      if (_f) {\n        const value = isWeb && isHTMLElement(_f.ref) && isNullOrUndefined(rawValue) ? '' : rawValue;\n        _f.value = getFieldValueAs(rawValue, _f);\n\n        if (isRadioInput(_f.ref)) {\n          (_f.refs || []).forEach(radioRef => radioRef.checked = radioRef.value === value);\n        } else if (isFileInput(_f.ref) && !isString(value)) {\n          _f.ref.files = value;\n        } else if (isMultipleSelect(_f.ref)) {\n          [..._f.ref.options].forEach(selectRef => selectRef.selected = value.includes(selectRef.value));\n        } else if (isCheckBoxInput(_f.ref) && _f.refs) {\n          _f.refs.length > 1 ? _f.refs.forEach(checkboxRef => checkboxRef.checked = Array.isArray(value) ? !!value.find(data => data === checkboxRef.value) : value === checkboxRef.value) : _f.refs[0].checked = !!value;\n        } else {\n          _f.ref.value = value;\n        }\n\n        if (shouldRender) {\n          const values = getFieldsValues(fieldsRef);\n          set(values, name, rawValue);\n          subjectsRef.current.control.next({\n            values: Object.assign(Object.assign({}, defaultValuesRef.current), values),\n            name\n          });\n        }\n\n        (options.shouldDirty || options.shouldTouch) && updateTouchAndDirtyState(name, value, options.shouldTouch);\n        options.shouldValidate && trigger(name);\n      } else {\n        field._f = {\n          ref: {\n            name,\n            value: rawValue\n          },\n          value: rawValue\n        };\n      }\n    }\n  }, []);\n  const getIsDirty = React.useCallback((name, data) => {\n    const formValues = getFieldsValues(fieldsRef);\n    name && data && set(formValues, name, data);\n    return !deepEqual(formValues, defaultValuesRef.current);\n  }, []);\n  const updateTouchAndDirtyState = React.useCallback(function (name, inputValue, isCurrentTouched) {\n    let shouldRender = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    const state = {\n      name\n    };\n    let isChanged = false;\n\n    if (readFormStateRef.current.isDirty) {\n      const previousIsDirty = formStateRef.current.isDirty;\n      formStateRef.current.isDirty = getIsDirty();\n      state.isDirty = formStateRef.current.isDirty;\n      isChanged = previousIsDirty !== state.isDirty;\n    }\n\n    if (readFormStateRef.current.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(formStateRef.current.dirtyFields, name);\n      const isCurrentFieldDirty = !deepEqual(get(defaultValuesRef.current, name), inputValue);\n      isCurrentFieldDirty ? set(formStateRef.current.dirtyFields, name, true) : unset(formStateRef.current.dirtyFields, name);\n      state.dirtyFields = formStateRef.current.dirtyFields;\n      isChanged = isChanged || isPreviousFieldDirty !== get(formStateRef.current.dirtyFields, name);\n    }\n\n    const isPreviousFieldTouched = get(formStateRef.current.touchedFields, name);\n\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(formStateRef.current.touchedFields, name, isCurrentTouched);\n      state.touchedFields = formStateRef.current.touchedFields;\n      isChanged = isChanged || readFormStateRef.current.touchedFields && isPreviousFieldTouched !== isCurrentTouched;\n    }\n\n    isChanged && shouldRender && subjectsRef.current.state.next(state);\n    return isChanged ? state : {};\n  }, []);\n  const executeInlineValidation = React.useCallback(async (name, skipReRender) => {\n    const error = (await validateField(get(fieldsRef.current, name), isValidateAllFieldCriteria, shouldUseNativeValidation))[name];\n    await shouldRenderBaseOnError(skipReRender, name, error);\n    return isUndefined(error);\n  }, [isValidateAllFieldCriteria]);\n  const executeResolverValidation = React.useCallback(async names => {\n    const {\n      errors\n    } = await resolverRef.current(getFieldsValues(fieldsRef), contextRef.current, getResolverOptions(namesRef.current.mount, fieldsRef.current, criteriaMode, shouldUseNativeValidation));\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error ? set(formStateRef.current.errors, name, error) : unset(formStateRef.current.errors, name);\n      }\n    } else {\n      formStateRef.current.errors = errors;\n    }\n\n    return errors;\n  }, [criteriaMode, shouldUseNativeValidation]);\n\n  const validateForm = async function (fieldsRef, shouldCheckValid) {\n    let context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      valid: true\n    };\n\n    for (const name in fieldsRef) {\n      const field = fieldsRef[name];\n\n      if (field) {\n        const _f = field._f;\n        const current = omit(field, '_f');\n\n        if (_f) {\n          const fieldError = await validateField(field, isValidateAllFieldCriteria, shouldUseNativeValidation);\n\n          if (shouldCheckValid) {\n            if (fieldError[_f.name]) {\n              context.valid = false;\n              break;\n            }\n          } else {\n            fieldError[_f.name] ? set(formStateRef.current.errors, _f.name, fieldError[_f.name]) : unset(formStateRef.current.errors, _f.name);\n          }\n        }\n\n        current && (await validateForm(current, shouldCheckValid, context));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const trigger = React.useCallback(async function (name) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const fieldNames = convertToArrayPayload(name);\n    let isValid;\n    subjectsRef.current.state.next({\n      isValidating: true\n    });\n\n    if (resolver) {\n      const schemaResult = await executeResolverValidation(isUndefined(name) ? name : fieldNames);\n      isValid = name ? fieldNames.every(name => !get(schemaResult, name)) : isEmptyObject(schemaResult);\n    } else {\n      if (name) {\n        isValid = (await Promise.all(fieldNames.filter(fieldName => get(fieldsRef.current, fieldName, {})._f).map(async fieldName => await executeInlineValidation(fieldName, true)))).every(Boolean);\n      } else {\n        await validateForm(fieldsRef.current);\n        isValid = isEmptyObject(formStateRef.current.errors);\n      }\n    }\n\n    subjectsRef.current.state.next(Object.assign(Object.assign({}, isString(name) ? {\n      name\n    } : {}), {\n      errors: formStateRef.current.errors,\n      isValidating: false\n    }));\n\n    if (options.shouldFocus && !isValid) {\n      focusFieldBy(fieldsRef.current, key => get(formStateRef.current.errors, key), name ? fieldNames : namesRef.current.mount);\n    }\n\n    readFormStateRef.current.isValid && updateIsValid();\n    return isValid;\n  }, [executeResolverValidation, executeInlineValidation]);\n\n  const updateIsValidAndInputValue = (name, ref, shouldSkipValueAs) => {\n    const field = get(fieldsRef.current, name);\n\n    if (field) {\n      const isValueUndefined = isUndefined(field._f.value);\n      const defaultValue = isValueUndefined ? isUndefined(get(fieldArrayDefaultValuesRef.current, name)) ? get(defaultValuesRef.current, name) : get(fieldArrayDefaultValuesRef.current, name) : field._f.value;\n\n      if (!isUndefined(defaultValue)) {\n        if (ref && ref.defaultChecked) {\n          field._f.value = getFieldValue(field);\n        } else if (shouldSkipValueAs) {\n          field._f.value = defaultValue;\n        } else {\n          setFieldValue(name, defaultValue);\n        }\n      } else if (isValueUndefined) {\n        field._f.value = getFieldValue(field);\n      }\n    }\n\n    isMountedRef.current && readFormStateRef.current.isValid && updateIsValid();\n  };\n\n  const updateIsValid = React.useCallback(async function () {\n    let values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const isValid = resolver ? isEmptyObject((await resolverRef.current(Object.assign(Object.assign({}, getFieldsValues(fieldsRef)), values), contextRef.current, getResolverOptions(namesRef.current.mount, fieldsRef.current, criteriaMode, shouldUseNativeValidation))).errors) : await validateForm(fieldsRef.current, true);\n\n    if (isValid !== formStateRef.current.isValid) {\n      formStateRef.current.isValid = isValid;\n      subjectsRef.current.state.next({\n        isValid\n      });\n    }\n  }, [criteriaMode, shouldUseNativeValidation]);\n  const setValues = React.useCallback((name, value, options) => Object.entries(value).forEach(_ref10 => {\n    let [fieldKey, fieldValue] = _ref10;\n    const fieldName = `${name}.${fieldKey}`;\n    const field = get(fieldsRef.current, fieldName);\n    const isFieldArray = namesRef.current.array.has(name);\n    (isFieldArray || !isPrimitive(fieldValue) || field && !field._f) && !isDateObject(fieldValue) ? setValues(fieldName, fieldValue, options) : setFieldValue(fieldName, fieldValue, options, true, !field);\n  }), [trigger]);\n\n  const setValue = function (name, value) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const field = get(fieldsRef.current, name);\n    const isFieldArray = namesRef.current.array.has(name);\n\n    if (isFieldArray) {\n      subjectsRef.current.array.next({\n        values: value,\n        name,\n        isReset: true\n      });\n\n      if ((readFormStateRef.current.isDirty || readFormStateRef.current.dirtyFields) && options.shouldDirty) {\n        set(formStateRef.current.dirtyFields, name, setFieldArrayDirtyFields(value, get(defaultValuesRef.current, name, []), get(formStateRef.current.dirtyFields, name, [])));\n        subjectsRef.current.state.next({\n          name,\n          dirtyFields: formStateRef.current.dirtyFields,\n          isDirty: getIsDirty(name, value)\n        });\n      }\n\n      !value.length && set(fieldsRef.current, name, []) && set(fieldArrayDefaultValuesRef.current, name, []);\n    }\n\n    (field && !field._f || isFieldArray) && !isNullOrUndefined(value) ? setValues(name, value, isFieldArray ? {} : options) : setFieldValue(name, value, options, true, !field);\n    isFieldWatched(name) && subjectsRef.current.state.next({});\n    subjectsRef.current.watch.next({\n      name,\n      values: getValues()\n    });\n  };\n\n  const handleValidate = async (target, fieldState, isWatched, isBlurEvent) => {\n    let error;\n    let isValid;\n    let name = target.name;\n    const field = get(fieldsRef.current, name);\n\n    if (resolver) {\n      const {\n        errors\n      } = await resolverRef.current(getFieldsValues(fieldsRef), contextRef.current, getResolverOptions([name], fieldsRef.current, criteriaMode, shouldUseNativeValidation));\n      error = get(errors, name);\n\n      if (isCheckBoxInput(target) && !error) {\n        const parentNodeName = getNodeParentName(name);\n        const currentError = get(errors, parentNodeName, {});\n        currentError.type && currentError.message && (error = currentError);\n\n        if (currentError || get(formStateRef.current.errors, parentNodeName)) {\n          name = parentNodeName;\n        }\n      }\n\n      isValid = isEmptyObject(errors);\n    } else {\n      error = (await validateField(field, isValidateAllFieldCriteria, shouldUseNativeValidation))[name];\n    }\n\n    !isBlurEvent && subjectsRef.current.watch.next({\n      name,\n      type: target.type,\n      values: getValues()\n    });\n    shouldRenderBaseOnError(false, name, error, fieldState, isValid, isWatched);\n  };\n\n  const handleChange = React.useCallback(async _ref11 => {\n    let {\n      type,\n      target,\n      target: {\n        value,\n        name,\n        type: inputType\n      }\n    } = _ref11;\n    const field = get(fieldsRef.current, name);\n\n    if (field) {\n      let inputValue = inputType ? getFieldValue(field) : undefined;\n      inputValue = isUndefined(inputValue) ? value : inputValue;\n      const isBlurEvent = type === EVENTS.BLUR;\n      const {\n        isOnBlur: isReValidateOnBlur,\n        isOnChange: isReValidateOnChange\n      } = getValidationModes(reValidateMode);\n      const shouldSkipValidation = !hasValidation(field._f, field._f.mount) && !resolver && !get(formStateRef.current.errors, name) || skipValidation(Object.assign({\n        isBlurEvent,\n        isTouched: !!get(formStateRef.current.touchedFields, name),\n        isSubmitted: formStateRef.current.isSubmitted,\n        isReValidateOnBlur,\n        isReValidateOnChange\n      }, validationMode));\n      const isWatched = !isBlurEvent && isFieldWatched(name);\n\n      if (!isUndefined(inputValue)) {\n        field._f.value = inputValue;\n      }\n\n      const fieldState = updateTouchAndDirtyState(name, field._f.value, isBlurEvent, false);\n      const shouldRender = !isEmptyObject(fieldState) || isWatched;\n\n      if (shouldSkipValidation) {\n        !isBlurEvent && subjectsRef.current.watch.next({\n          name,\n          type,\n          values: getValues()\n        });\n        return shouldRender && subjectsRef.current.state.next(isWatched ? {\n          name\n        } : Object.assign(Object.assign({}, fieldState), {\n          name\n        }));\n      }\n\n      subjectsRef.current.state.next({\n        isValidating: true\n      });\n      handleValidate(target, fieldState, isWatched, isBlurEvent);\n    }\n  }, []);\n\n  const getValues = fieldNames => {\n    const values = Object.assign(Object.assign({}, defaultValuesRef.current), getFieldsValues(fieldsRef));\n    return isUndefined(fieldNames) ? values : isString(fieldNames) ? get(values, fieldNames) : fieldNames.map(name => get(values, name));\n  };\n\n  const clearErrors = name => {\n    name ? convertToArrayPayload(name).forEach(inputName => unset(formStateRef.current.errors, inputName)) : formStateRef.current.errors = {};\n    subjectsRef.current.state.next({\n      errors: formStateRef.current.errors\n    });\n  };\n\n  const setError = (name, error, options) => {\n    const ref = ((get(fieldsRef.current, name) || {\n      _f: {}\n    })._f || {}).ref;\n    set(formStateRef.current.errors, name, Object.assign(Object.assign({}, error), {\n      ref\n    }));\n    subjectsRef.current.state.next({\n      name,\n      errors: formStateRef.current.errors,\n      isValid: false\n    });\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watchInternal = React.useCallback((fieldNames, defaultValue, isGlobal, formValues) => {\n    const isArrayNames = Array.isArray(fieldNames);\n    const fieldValues = formValues || isMountedRef.current ? Object.assign(Object.assign({}, defaultValuesRef.current), formValues || getFieldsValues(fieldsRef)) : isUndefined(defaultValue) ? defaultValuesRef.current : isArrayNames ? defaultValue : {\n      [fieldNames]: defaultValue\n    };\n\n    if (isUndefined(fieldNames)) {\n      isGlobal && (namesRef.current.watchAll = true);\n      return fieldValues;\n    }\n\n    const result = [];\n\n    for (const fieldName of convertToArrayPayload(fieldNames)) {\n      isGlobal && namesRef.current.watch.add(fieldName);\n      result.push(get(fieldValues, fieldName));\n    }\n\n    return isArrayNames ? result : result[0];\n  }, []);\n\n  const watch = (fieldName, defaultValue) => isFunction(fieldName) ? subjectsRef.current.watch.subscribe({\n    next: info => fieldName(watchInternal(undefined, defaultValue), info)\n  }) : watchInternal(fieldName, defaultValue, true);\n\n  const unregister = function (name) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    for (const inputName of name ? convertToArrayPayload(name) : namesRef.current.mount) {\n      namesRef.current.mount.delete(inputName);\n      namesRef.current.array.delete(inputName);\n\n      if (get(fieldsRef.current, inputName)) {\n        !options.keepError && unset(formStateRef.current.errors, inputName);\n        !options.keepValue && unset(fieldsRef.current, inputName);\n        !options.keepDirty && unset(formStateRef.current.dirtyFields, inputName);\n        !options.keepTouched && unset(formStateRef.current.touchedFields, inputName);\n        !shouldUnregister && !options.keepDefaultValue && unset(defaultValuesRef.current, inputName);\n      }\n    }\n\n    subjectsRef.current.watch.next({\n      values: getValues()\n    });\n    subjectsRef.current.state.next(Object.assign(Object.assign({}, formStateRef.current), !options.keepDirty ? {} : {\n      isDirty: getIsDirty()\n    }));\n    !options.keepIsValid && updateIsValid();\n  };\n\n  const registerFieldRef = (name, ref, options) => {\n    register(name, options);\n    let field = get(fieldsRef.current, name);\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n\n    if (ref === field._f.ref || isRadioOrCheckbox && compact(field._f.refs || []).find(option => option === ref)) {\n      return;\n    }\n\n    field = {\n      _f: isRadioOrCheckbox ? Object.assign(Object.assign({}, field._f), {\n        refs: [...compact(field._f.refs || []).filter(ref => isHTMLElement(ref) && document.contains(ref)), ref],\n        ref: {\n          type: ref.type,\n          name\n        }\n      }) : Object.assign(Object.assign({}, field._f), {\n        ref\n      })\n    };\n    set(fieldsRef.current, name, field);\n    updateIsValidAndInputValue(name, ref);\n  };\n\n  const register = React.useCallback(function (name) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const field = get(fieldsRef.current, name);\n    set(fieldsRef.current, name, {\n      _f: Object.assign(Object.assign(Object.assign({}, field && field._f ? field._f : {\n        ref: {\n          name\n        }\n      }), {\n        name,\n        mount: true\n      }), options)\n    });\n    namesRef.current.mount.add(name);\n    !field && updateIsValidAndInputValue(name, undefined, true);\n    return isWindowUndefined ? {\n      name: name\n    } : {\n      name,\n      onChange: handleChange,\n      onBlur: handleChange,\n      ref: ref => {\n        if (ref) {\n          registerFieldRef(name, ref, options);\n        } else {\n          const field = get(fieldsRef.current, name, {});\n          const shouldUnmount = shouldUnregister || options.shouldUnregister;\n\n          if (field._f) {\n            field._f.mount = false; // If initial state of field element is disabled,\n            // value is not set on first \"register\"\n            // re-sync the value in when it switched to enabled\n\n            if (isUndefined(field._f.value)) {\n              field._f.value = field._f.ref.value;\n            }\n          }\n\n          shouldUnmount && !(isNameInFieldArray(namesRef.current.array, name) && inFieldArrayActionRef.current) && namesRef.current.unMount.add(name);\n        }\n      }\n    };\n  }, []);\n  const handleSubmit = React.useCallback((onValid, onInvalid) => async e => {\n    if (e) {\n      e.preventDefault && e.preventDefault();\n      e.persist && e.persist();\n    }\n\n    let hasNoPromiseError = true;\n    let fieldValues = getFieldsValues(fieldsRef);\n    subjectsRef.current.state.next({\n      isSubmitting: true\n    });\n\n    try {\n      if (resolver) {\n        const {\n          errors,\n          values\n        } = await resolverRef.current(fieldValues, contextRef.current, getResolverOptions(namesRef.current.mount, fieldsRef.current, criteriaMode, shouldUseNativeValidation));\n        formStateRef.current.errors = errors;\n        fieldValues = values;\n      } else {\n        await validateForm(fieldsRef.current);\n      }\n\n      if (isEmptyObject(formStateRef.current.errors) && Object.keys(formStateRef.current.errors).every(name => get(fieldValues, name))) {\n        subjectsRef.current.state.next({\n          errors: {},\n          isSubmitting: true\n        });\n        await onValid(fieldValues, e);\n      } else {\n        onInvalid && (await onInvalid(formStateRef.current.errors, e));\n        shouldFocusError && focusFieldBy(fieldsRef.current, key => get(formStateRef.current.errors, key), namesRef.current.mount);\n      }\n    } catch (err) {\n      hasNoPromiseError = false;\n      throw err;\n    } finally {\n      formStateRef.current.isSubmitted = true;\n      subjectsRef.current.state.next({\n        isSubmitted: true,\n        isSubmitting: false,\n        isSubmitSuccessful: isEmptyObject(formStateRef.current.errors) && hasNoPromiseError,\n        submitCount: formStateRef.current.submitCount + 1,\n        errors: formStateRef.current.errors\n      });\n    }\n  }, [shouldFocusError, isValidateAllFieldCriteria, criteriaMode, shouldUseNativeValidation]);\n\n  const registerAbsentFields = function (defaultValues) {\n    let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n    for (const key in defaultValues) {\n      const value = defaultValues[key];\n      const fieldName = name + (name ? '.' : '') + key;\n      const field = get(fieldsRef.current, fieldName);\n\n      if (!field || !field._f) {\n        if (isObject(value) || Array.isArray(value)) {\n          registerAbsentFields(value, fieldName);\n        } else if (!field) {\n          register(fieldName, {\n            value\n          });\n        }\n      }\n    }\n  };\n\n  const reset = function (values) {\n    let keepStateOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const updatedValues = values || defaultValuesRef.current;\n\n    if (isWeb && !keepStateOptions.keepValues) {\n      for (const name of namesRef.current.mount) {\n        const field = get(fieldsRef.current, name);\n\n        if (field && field._f) {\n          const inputRef = Array.isArray(field._f.refs) ? field._f.refs[0] : field._f.ref;\n\n          try {\n            isHTMLElement(inputRef) && inputRef.closest('form').reset();\n            break;\n          } catch (_a) {}\n        }\n      }\n    }\n\n    if (!keepStateOptions.keepDefaultValues) {\n      defaultValuesRef.current = Object.assign({}, updatedValues);\n      fieldArrayDefaultValuesRef.current = Object.assign({}, updatedValues);\n    }\n\n    if (!keepStateOptions.keepValues) {\n      fieldsRef.current = {};\n      subjectsRef.current.control.next({\n        values: keepStateOptions.keepDefaultValues ? defaultValuesRef.current : Object.assign({}, updatedValues)\n      });\n      subjectsRef.current.watch.next({\n        values: Object.assign({}, updatedValues)\n      });\n      subjectsRef.current.array.next({\n        values: Object.assign({}, updatedValues),\n        isReset: true\n      });\n    }\n\n    namesRef.current = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false\n    };\n    subjectsRef.current.state.next({\n      submitCount: keepStateOptions.keepSubmitCount ? formStateRef.current.submitCount : 0,\n      isDirty: keepStateOptions.keepDirty ? formStateRef.current.isDirty : keepStateOptions.keepDefaultValues ? deepEqual(values, defaultValuesRef.current) : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted ? formStateRef.current.isSubmitted : false,\n      dirtyFields: keepStateOptions.keepDirty ? formStateRef.current.dirtyFields : {},\n      touchedFields: keepStateOptions.keepTouched ? formStateRef.current.touchedFields : {},\n      errors: keepStateOptions.keepErrors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false\n    });\n    isMountedRef.current = !!keepStateOptions.keepIsValid;\n  };\n\n  const setFocus = name => get(fieldsRef.current, name)._f.ref.focus();\n\n  React.useEffect(() => {\n    const formStateSubscription = subjectsRef.current.state.subscribe({\n      next(formState) {\n        if (shouldRenderFormState(formState, readFormStateRef.current, true)) {\n          formStateRef.current = Object.assign(Object.assign({}, formStateRef.current), formState);\n          updateFormState(formStateRef.current);\n        }\n      }\n\n    });\n    const useFieldArraySubscription = subjectsRef.current.array.subscribe({\n      next(state) {\n        if (state.values && state.name && readFormStateRef.current.isValid) {\n          const values = getFieldsValues(fieldsRef);\n          set(values, state.name, state.values);\n          updateIsValid(values);\n        }\n      }\n\n    });\n    return () => {\n      formStateSubscription.unsubscribe();\n      useFieldArraySubscription.unsubscribe();\n    };\n  }, []);\n  React.useEffect(() => {\n    const unregisterFieldNames = [];\n\n    const isLiveInDom = ref => !isHTMLElement(ref) || !document.contains(ref);\n\n    if (!isMountedRef.current) {\n      isMountedRef.current = true;\n      readFormStateRef.current.isValid && updateIsValid();\n      !shouldUnregister && registerAbsentFields(defaultValuesRef.current);\n    }\n\n    for (const name of namesRef.current.unMount) {\n      const field = get(fieldsRef.current, name);\n      field && (field._f.refs ? field._f.refs.every(isLiveInDom) : isLiveInDom(field._f.ref)) && unregisterFieldNames.push(name);\n    }\n\n    unregisterFieldNames.length && unregister(unregisterFieldNames);\n    namesRef.current.unMount = new Set();\n  });\n  return {\n    control: React.useMemo(() => ({\n      register,\n      inFieldArrayActionRef,\n      getIsDirty,\n      subjectsRef,\n      watchInternal,\n      fieldsRef,\n      updateIsValid,\n      namesRef,\n      readFormStateRef,\n      formStateRef,\n      defaultValuesRef,\n      fieldArrayDefaultValuesRef,\n      setValues,\n      unregister,\n      shouldUnmount: shouldUnregister\n    }), []),\n    formState: getProxyFormState(isProxyEnabled, formState, readFormStateRef),\n    trigger,\n    register,\n    handleSubmit,\n    watch: React.useCallback(watch, []),\n    setValue: React.useCallback(setValue, [setValues]),\n    getValues: React.useCallback(getValues, []),\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    unregister: React.useCallback(unregister, []),\n    setError: React.useCallback(setError, []),\n    setFocus: React.useCallback(setFocus, [])\n  };\n}\n\nfunction useWatch(props) {\n  const {\n    control,\n    name,\n    defaultValue\n  } = props || {};\n  const methods = useFormContext();\n  const nameRef = React.useRef(name);\n  nameRef.current = name;\n  const {\n    watchInternal,\n    subjectsRef\n  } = control || methods.control;\n  const [value, updateValue] = React.useState(isUndefined(defaultValue) ? watchInternal(name) : defaultValue);\n  React.useEffect(() => {\n    watchInternal(name);\n    const watchSubscription = subjectsRef.current.watch.subscribe({\n      next: _ref12 => {\n        let {\n          name: inputName,\n          values\n        } = _ref12;\n        return (!nameRef.current || !inputName || convertToArrayPayload(nameRef.current).some(fieldName => inputName && fieldName && (fieldName.startsWith(inputName) || inputName.startsWith(fieldName)))) && updateValue(watchInternal(nameRef.current, defaultValue, false, values));\n      }\n    });\n    return () => watchSubscription.unsubscribe();\n  }, []);\n  return value;\n}\n\nexport { Controller, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };","map":{"version":3,"mappings":"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","names":["element","type","data","Date","value","isObjectType","isNullOrUndefined","Array","isArray","isDateObject","event","isObject","target","isCheckBoxInput","checked","name","substring","search","names","some","current","getNodeParentName","filter","Boolean","val","undefined","obj","path","defaultValue","result","compact","split","reduce","key","isUndefined","EVENTS","BLUR","CHANGE","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","INPUT_VALIDATION_RULES","max","min","maxLength","minLength","pattern","required","validate","source","copy","FormContext","React","createContext","displayName","useFormContext","useContext","FormProvider","props","Provider","omit","children","isProxyEnabled","formState","readFormStateRef","localReadFormStateRef","isRoot","Proxy","get","prop","Object","keys","length","formStateData","isEmptyObject","find","window","HTMLElement","document","isWeb","useFormState","control","methods","formStateRef","subjectsRef","nameRef","useRef","updateFormState","useState","readFormState","isDirty","dirtyFields","touchedFields","isValidating","isValid","errors","useEffect","formStateSubscription","state","subscribe","next","convertToArrayPayload","includes","shouldRenderFormState","unsubscribe","getProxyFormState","useController","rules","shouldUnregister","defaultValuesRef","register","fieldsRef","unregister","namesRef","shouldUnmount","inFieldArrayActionRef","field","setInputStateValue","_f","ref","updateIsMounted","mount","controllerSubscription","values","shouldUnmountField","isNameInFieldArray","array","getControllerValue","elm","focus","setCustomValidity","message","reportValidity","fieldState","invalid","isTouched","error","Controller","render","validateAllFieldCriteria","types","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","callback","fieldsNames","refs","getFieldsValues","output","disabled","every","d","performance","now","c","r","Math","random","toString","keyName","map","generateId","deepEqual","object1","object2","isErrorObject","isPrimitive","isValidElement","keys1","keys2","val1","val2","deepMerge","targetValue","sourceValue","setDirtyFields","defaultValues","parentNode","parentName","slice","append","fill","insert","from","to","splice","prepend","removeAtIndexes","indexes","i","temp","sort","a","b","indexA","indexB","baseGet","updatePath","unset","childObject","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isBoolean","useFieldArray","focusNameRef","isMountedRef","getIsDirty","updateIsValid","fieldArrayDefaultValuesRef","setValues","setFields","mapIds","getFieldArrayParentName","add","omitKey","getCurrentFieldsValues","getFocusFieldName","options","shouldFocus","focusName","focusIndex","setFieldsAndNotify","fieldsValues","cleanup","batchStateUpdate","method","args","updatedFieldArrayValues","shouldSet","argA","argB","setFieldArrayDirtyFields","registerFieldArray","forEach","appendValueItem","valueIndex","rootName","entries","inputName","appendValue","appendAt","currentIndex","fillEmptyArray","prependValue","prependAt","remove","removeArrayAt","insertValue","insertAt","swap","fieldValues","swapArrayAt","move","moveArrayAt","update","shouldValidate","shouldDirty","watchAll","watchField","watch","startsWith","fieldArraySubscription","inputFieldArrayName","isReset","fieldArrayValues","useCallback","defaultResult","validResult","option","attributes","valueAsNumber","valueAsDate","setValueAs","NaN","selected","defaultReturn","previous","getFieldValue","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","getMultipleSelectValue","isCheckBox","getCheckboxValue","getFieldValueAs","fieldsRefs","criteriaMode","shouldUseNativeValidation","mounted","isOnBlur","isOnChange","isOnTouch","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","isString","RegExp","getValidateError","isMessage","validationData","isRegex","inputValue","inputRef","setCustomValidty","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","exceedMin","maxOutput","minOutput","valueNumber","parseFloat","valueDate","maxLengthOutput","minLengthOutput","patternValue","match","isFunction","validateError","validationResult","wait","timer","clearTimeout","setTimeout","mode","isOnSubmit","Subscription","constructor","tearDown","tearDowns","push","teardown","Subscriber","observer","subscription","closed","Subject","observers","subscriber","isWindowUndefined","useForm","reValidateMode","resolver","context","shouldFocusError","delayError","submitCount","isSubmitting","isSubmitSuccessful","resolverRef","contextRef","_delayCallback","Set","unMount","validationMode","getValidationModes","isValidateAllFieldCriteria","isFieldWatched","has","updateErrorState","shouldRenderBaseOnError","shouldSkipRender","isValidFromResolver","isWatched","previousError","validateForm","debounce","updatedFormState","setFieldValue","rawValue","shouldRender","shouldRegister","isHTMLElement","radioRef","selectRef","checkboxRef","shouldTouch","updateTouchAndDirtyState","trigger","formValues","isCurrentTouched","isChanged","previousIsDirty","isPreviousFieldDirty","isCurrentFieldDirty","isPreviousFieldTouched","executeInlineValidation","skipReRender","validateField","executeResolverValidation","getResolverOptions","shouldCheckValid","valid","fieldError","fieldNames","schemaResult","Promise","fieldName","updateIsValidAndInputValue","shouldSkipValueAs","isValueUndefined","defaultChecked","fieldKey","fieldValue","isFieldArray","setValue","getValues","handleValidate","parentNodeName","currentError","handleChange","inputType","shouldSkipValidation","hasValidation","skipValidation","clearErrors","setError","watchInternal","isGlobal","isArrayNames","info","delete","keepError","keepValue","keepDirty","keepTouched","keepDefaultValue","keepIsValid","registerFieldRef","isRadioOrCheckboxFunction","contains","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","err","registerAbsentFields","reset","keepStateOptions","updatedValues","keepValues","closest","keepDefaultValues","keepSubmitCount","keepIsSubmitted","keepErrors","setFocus","useFieldArraySubscription","unregisterFieldNames","isLiveInDom","useMemo","useWatch","updateValue","watchSubscription"],"sources":["../src/utils/isCheckBoxInput.ts","../src/utils/isDateObject.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isObject.ts","../src/logic/getControllerValue.ts","../src/logic/getNodeParentName.ts","../src/logic/isNameInFieldArray.ts","../src/utils/compact.ts","../src/utils/isUndefined.ts","../src/utils/get.ts","../src/constants.ts","../src/utils/omit.ts","../src/useFormContext.tsx","../src/logic/getProxyFormState.ts","../src/utils/isEmptyObject.ts","../src/logic/shouldRenderFormState.ts","../src/utils/convertToArrayPayload.ts","../src/utils/isWeb.ts","../src/utils/isProxyEnabled.ts","../src/useFormState.ts","../src/useController.ts","../src/controller.tsx","../src/logic/appendErrors.ts","../src/utils/isKey.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/focusFieldBy.ts","../src/logic/getFieldsValues.ts","../src/logic/generateId.ts","../src/logic/mapId.ts","../src/utils/isPrimitive.ts","../src/utils/deepEqual.ts","../src/utils/deepMerge.ts","../src/logic/setFieldArrayDirtyFields.ts","../src/utils/append.ts","../src/utils/fillEmptyArray.ts","../src/utils/insert.ts","../src/utils/move.ts","../src/utils/prepend.ts","../src/utils/remove.ts","../src/utils/swap.ts","../src/utils/isBoolean.ts","../src/utils/unset.ts","../src/useFieldArray.ts","../src/utils/isFileInput.ts","../src/utils/isMultipleSelect.ts","../src/utils/isRadioInput.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValueAs.ts","../src/logic/getMultipleSelectValue.ts","../src/logic/getRadioValue.ts","../src/logic/getFieldValue.ts","../src/logic/getResolverOptions.ts","../src/logic/hasValidation.ts","../src/logic/skipValidation.ts","../src/utils/isFunction.ts","../src/utils/isString.ts","../src/utils/isMessage.ts","../src/utils/isRegex.ts","../src/logic/getValidateError.ts","../src/logic/getValueAndMessage.ts","../src/logic/validateField.ts","../src/utils/debounce.ts","../src/utils/getValidationModes.ts","../src/utils/isHTMLElement.ts","../src/utils/isRadioOrCheckbox.ts","../src/utils/Subject.ts","../src/useForm.ts","../src/useWatch.ts"],"sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (data: unknown) => data instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T extends unknown>(\n  obj: T,\n  path: string,\n  defaultValue?: unknown,\n) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst FormContext = React.createContext<UseFormReturn | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(FormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>(\n  props: FormProviderProps<TFieldValues>,\n) => (\n  <FormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </FormContext.Provider>\n);\n","import * as React from 'react';\n\nimport { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  isProxyEnabled: boolean,\n  formState: FormState<TFieldValues>,\n  readFormStateRef: React.MutableRefObject<ReadFormState>,\n  localReadFormStateRef?: React.MutableRefObject<ReadFormState>,\n  isRoot = true,\n) =>\n  isProxyEnabled\n    ? new Proxy(formState, {\n        get: (obj, prop: keyof FormStateProxy) => {\n          if (prop in obj) {\n            if (readFormStateRef.current[prop] !== VALIDATION_MODE.all) {\n              readFormStateRef.current[prop] = isRoot\n                ? VALIDATION_MODE.all\n                : true;\n            }\n            localReadFormStateRef &&\n              (localReadFormStateRef.current[prop] = true);\n            return obj[prop];\n          }\n\n          return undefined;\n        },\n      })\n    : formState;\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  readFormStateRef: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(readFormStateRef).length ||\n    Object.keys(formState).find(\n      (key) =>\n        readFormStateRef[key as keyof ReadFormState] ===\n        (isRoot ? VALIDATION_MODE.all : true),\n    )\n  );\n};\n","export default <T extends unknown>(value: T) =>\n  Array.isArray(value) ? value : [value];\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import isWeb from './isWeb';\n\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== 'undefined';\n\nexport default isProxyEnabled;\n","import * as React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport isProxyEnabled from './utils/isProxyEnabled';\nimport {\n  FieldValues,\n  FormState,\n  InternalFieldName,\n  UseFormStateProps,\n  UseFormStateReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const { control, name } = props || {};\n  const methods = useFormContext();\n  const { formStateRef, subjectsRef, readFormStateRef } =\n    control || methods.control;\n  const nameRef = React.useRef<InternalFieldName>(name as InternalFieldName);\n  nameRef.current = name as InternalFieldName;\n\n  const [formState, updateFormState] = React.useState(formStateRef.current);\n  const readFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n\n  React.useEffect(() => {\n    const formStateSubscription = subjectsRef.current.state.subscribe({\n      next: (formState) =>\n        (!nameRef.current ||\n          !formState.name ||\n          convertToArrayPayload(nameRef.current).includes(formState.name)) &&\n        shouldRenderFormState(formState, readFormState.current) &&\n        updateFormState({\n          ...formStateRef.current,\n          ...formState,\n        }),\n    });\n\n    return () => formStateSubscription.unsubscribe();\n  }, []);\n\n  return getProxyFormState<TFieldValues>(\n    isProxyEnabled,\n    formState as FormState<TFieldValues>,\n    readFormStateRef,\n    readFormState,\n    false,\n  );\n}\n\nexport { useFormState };\n","import * as React from 'react';\n\nimport getControllerValue from './logic/getControllerValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport get from './utils/get';\nimport isUndefined from './utils/isUndefined';\nimport { EVENTS } from './constants';\nimport {\n  FieldPath,\n  FieldValues,\n  InternalFieldName,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\n\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>({\n  name,\n  rules,\n  defaultValue,\n  control,\n  shouldUnregister,\n}: UseControllerProps<TFieldValues, TName>): UseControllerReturn<\n  TFieldValues,\n  TName\n> {\n  const methods = useFormContext<TFieldValues>();\n  const {\n    defaultValuesRef,\n    register,\n    fieldsRef,\n    unregister,\n    namesRef,\n    subjectsRef,\n    shouldUnmount,\n    inFieldArrayActionRef,\n  } = control || methods.control;\n\n  const field = get(fieldsRef.current, name);\n  const [value, setInputStateValue] = React.useState(\n    field && field._f && !isUndefined(field._f.value)\n      ? field._f.value\n      : isUndefined(get(defaultValuesRef.current, name))\n      ? defaultValue\n      : get(defaultValuesRef.current, name),\n  );\n  const { onChange, onBlur, ref } = register(name, {\n    ...rules,\n    value,\n  });\n\n  const formState = useFormState({\n    control: control || methods.control,\n    name,\n  });\n\n  function updateIsMounted(name: string, value: boolean) {\n    const field = get(fieldsRef.current, name);\n    if (field && field._f) {\n      field._f.mount = value;\n    }\n  }\n\n  React.useEffect(() => {\n    const controllerSubscription = subjectsRef.current.control.subscribe({\n      next: (data) =>\n        (!data.name || name === data.name) &&\n        setInputStateValue(get(data.values, name)),\n    });\n    updateIsMounted(name, true);\n\n    return () => {\n      controllerSubscription.unsubscribe();\n      const shouldUnmountField = shouldUnmount || shouldUnregister;\n\n      if (\n        isNameInFieldArray(namesRef.current.array, name)\n          ? shouldUnmountField && !inFieldArrayActionRef.current\n          : shouldUnmountField\n      ) {\n        unregister(name);\n      } else {\n        updateIsMounted(name, false);\n      }\n    };\n  }, [name]);\n\n  return {\n    field: {\n      onChange: (event: any) => {\n        const value = getControllerValue(event);\n        setInputStateValue(value);\n\n        onChange({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.CHANGE,\n        });\n      },\n      onBlur: () => {\n        onBlur({\n          target: {\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      },\n      name,\n      value,\n      ref: (elm) =>\n        elm &&\n        ref({\n          focus: () => elm.focus && elm.focus(),\n          setCustomValidity: (message: string) =>\n            elm.setCustomValidity(message),\n          reportValidity: () => elm.reportValidity(),\n        }),\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name),\n    },\n  };\n}\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import * as React from 'react';\n\nimport { FieldRefs, FieldValues } from '../types';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport omit from '../utils/omit';\nimport set from '../utils/set';\n\nconst getFieldsValues = (\n  fieldsRef: React.MutableRefObject<FieldRefs>,\n  output: FieldValues = {},\n): any => {\n  for (const name in fieldsRef.current) {\n    const field = fieldsRef.current[name];\n\n    if (field && !isNullOrUndefined(output)) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      set(\n        output,\n        name,\n        _f && _f.ref\n          ? _f.ref.disabled || (_f.refs && _f.refs.every((ref) => ref.disabled))\n            ? undefined\n            : _f.value\n          : Array.isArray(field)\n          ? []\n          : {},\n      );\n\n      current &&\n        getFieldsValues(\n          {\n            current,\n          },\n          output[name],\n        );\n    }\n  }\n\n  return output;\n};\n\nexport default getFieldsValues;\n","export default () => {\n  const d =\n    typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import { FieldValues } from '../types';\n\nimport generateId from './generateId';\n\nexport default <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TKeyName extends string = 'id',\n>(\n  values: Partial<TFieldArrayValues>[] = [],\n  keyName: TKeyName,\n): any =>\n  values.map((value: Partial<TFieldArrayValues>) => ({\n    [keyName]: (value && value[keyName]) || generateId(),\n    ...value,\n  }));\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import * as React from 'react';\n\nimport isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    isDateObject(object1) ||\n    isDateObject(object2)\n  ) {\n    return object1 === object2;\n  }\n\n  if (!React.isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    for (const key of keys1) {\n      const val1 = object1[key];\n\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n\n        if (\n          (isObject(val1) || Array.isArray(val1)) &&\n          (isObject(val2) || Array.isArray(val2))\n            ? !deepEqual(val1, val2, isErrorObject)\n            : val1 !== val2\n        ) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>,\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>,\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        !isNullOrUndefined(defaultValues) &&\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function append<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(data), ...convertToArrayPayload(value)];\n}\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? Array(value.length).fill(undefined) : undefined;\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...convertToArrayPayload(value),\n    ...data.slice(index),\n  ];\n}\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function prepend<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\n}\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\n};\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldArrayParentName from './logic/getNodeParentName';\nimport mapIds from './logic/mapId';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport appendAt from './utils/append';\nimport compact from './utils/compact';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport get from './utils/get';\nimport insertAt from './utils/insert';\nimport isPrimitive from './utils/isPrimitive';\nimport moveArrayAt from './utils/move';\nimport omit from './utils/omit';\nimport prependAt from './utils/prepend';\nimport removeArrayAt from './utils/remove';\nimport set from './utils/set';\nimport swapArrayAt from './utils/swap';\nimport unset from './utils/unset';\nimport {\n  FieldArray,\n  FieldArrayMethodProps,\n  FieldArrayPath,\n  FieldArrayWithId,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldValues,\n  Path,\n  PathValue,\n  UnpackNestedValue,\n  UseFieldArrayProps,\n  UseFieldArrayReturn,\n  UseFormRegister,\n} from './types';\nimport { useFormContext } from './useFormContext';\n\nexport const useFieldArray = <\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>,\n  TKeyName extends string = 'id',\n>({\n  control,\n  name,\n  keyName = 'id' as TKeyName,\n  shouldUnregister,\n}: UseFieldArrayProps<\n  TFieldValues,\n  TFieldArrayName,\n  TKeyName\n>): UseFieldArrayReturn<TFieldValues, TFieldArrayName, TKeyName> => {\n  const methods = useFormContext();\n  const focusNameRef = React.useRef('');\n  const isMountedRef = React.useRef(false);\n  const {\n    getIsDirty,\n    namesRef,\n    fieldsRef,\n    defaultValuesRef,\n    formStateRef,\n    subjectsRef,\n    readFormStateRef,\n    updateIsValid,\n    fieldArrayDefaultValuesRef,\n    unregister,\n    shouldUnmount,\n    inFieldArrayActionRef,\n    setValues,\n    register,\n  } = control || methods.control;\n\n  const [fields, setFields] = React.useState<\n    Partial<FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>>[]\n  >(\n    mapIds(\n      (get(fieldsRef.current, name) && isMountedRef.current\n        ? get(getFieldsValues(fieldsRef), name)\n        : get(fieldArrayDefaultValuesRef.current, getFieldArrayParentName(name))\n        ? get(fieldArrayDefaultValuesRef.current, name)\n        : get(defaultValuesRef.current, name)) || [],\n      keyName,\n    ),\n  );\n\n  set(fieldArrayDefaultValuesRef.current, name, [...fields]);\n  namesRef.current.array.add(name);\n\n  const omitKey = <\n    T extends Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[],\n  >(\n    fields: T,\n  ) =>\n    fields.map((field = {}) => omit(field as Record<TKeyName, any>, keyName));\n\n  const getCurrentFieldsValues = () => {\n    const values = get(getFieldsValues(fieldsRef), name, []);\n\n    return mapIds<TFieldValues, TKeyName>(\n      get(fieldArrayDefaultValuesRef.current, name, []).map(\n        (item: Partial<TFieldValues>, index: number) => ({\n          ...item,\n          ...values[index],\n        }),\n      ),\n      keyName,\n    );\n  };\n\n  const getFocusFieldName = (\n    index: number,\n    options?: FieldArrayMethodProps,\n  ): string =>\n    options && !options.shouldFocus\n      ? options.focusName || `${name}.${options.focusIndex}.`\n      : `${name}.${index}.`;\n\n  const setFieldsAndNotify = (\n    fieldsValues: Partial<FieldArray<TFieldValues, TFieldArrayName>>[] = [],\n  ) => setFields(mapIds(fieldsValues, keyName));\n\n  const cleanup = <T>(ref: T) =>\n    !compact(get(ref, name, [])).length && unset(ref, name);\n\n  const batchStateUpdate = <T extends Function>(\n    method: T,\n    args: {\n      argA?: unknown;\n      argB?: unknown;\n    },\n    updatedFieldArrayValues: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = [],\n    shouldSet = true,\n  ) => {\n    inFieldArrayActionRef.current = true;\n    if (get(fieldsRef.current, name)) {\n      const output = method(get(fieldsRef.current, name), args.argA, args.argB);\n      shouldSet && set(fieldsRef.current, name, output);\n    }\n\n    if (Array.isArray(get(formStateRef.current.errors, name))) {\n      const output = method(\n        get(formStateRef.current.errors, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(formStateRef.current.errors, name, output);\n      cleanup(formStateRef.current.errors);\n    }\n\n    if (\n      readFormStateRef.current.touchedFields &&\n      get(formStateRef.current.touchedFields, name)\n    ) {\n      const output = method(\n        get(formStateRef.current.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(formStateRef.current.touchedFields, name, output);\n      cleanup(formStateRef.current.touchedFields);\n    }\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      set(\n        formStateRef.current.dirtyFields,\n        name,\n        setFieldArrayDirtyFields(\n          omitKey(updatedFieldArrayValues),\n          get(defaultValuesRef.current, name, []),\n          get(formStateRef.current.dirtyFields, name, []),\n        ),\n      );\n      updatedFieldArrayValues &&\n        set(\n          formStateRef.current.dirtyFields,\n          name,\n          setFieldArrayDirtyFields(\n            omitKey(updatedFieldArrayValues),\n            get(defaultValuesRef.current, name, []),\n            get(formStateRef.current.dirtyFields, name, []),\n          ),\n        );\n      cleanup(formStateRef.current.dirtyFields);\n    }\n\n    subjectsRef.current.state.next({\n      dirtyFields: formStateRef.current\n        .dirtyFields as FieldNamesMarkedBoolean<TFieldValues>,\n      isDirty: getIsDirty(name, omitKey(updatedFieldArrayValues)),\n      errors: formStateRef.current.errors as FieldErrors<TFieldValues>,\n      isValid: formStateRef.current.isValid,\n    });\n  };\n\n  const registerFieldArray = <T extends Object[]>(\n    values: T,\n    index = 0,\n    parentName = '',\n  ) =>\n    values.forEach((appendValueItem, valueIndex) => {\n      const rootName = `${parentName || name}.${\n        parentName ? valueIndex : index + valueIndex\n      }`;\n      isPrimitive(appendValueItem)\n        ? (register as UseFormRegister<TFieldValues>)(\n            rootName as Path<TFieldValues>,\n            {\n              value: appendValueItem as PathValue<\n                TFieldValues,\n                Path<TFieldValues>\n              >,\n            },\n          )\n        : Object.entries(appendValueItem).forEach(([key, value]) => {\n            const inputName = rootName + '.' + key;\n\n            Array.isArray(value)\n              ? registerFieldArray(value, valueIndex, inputName)\n              : (register as UseFormRegister<TFieldValues>)(\n                  inputName as Path<TFieldValues>,\n                  { value },\n                );\n          });\n    });\n\n  const append = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const appendValue = convertToArrayPayload(value);\n    const updatedFieldArrayValues = appendAt(\n      getCurrentFieldsValues(),\n      appendValue,\n    );\n    const currentIndex = updatedFieldArrayValues.length - appendValue.length;\n    setFieldsAndNotify(\n      updatedFieldArrayValues as Partial<\n        FieldArray<TFieldValues, TFieldArrayName>\n      >[],\n    );\n    batchStateUpdate(\n      appendAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updatedFieldArrayValues as Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n      false,\n    );\n    registerFieldArray(appendValue, currentIndex);\n\n    focusNameRef.current = getFocusFieldName(currentIndex, options);\n  };\n\n  const prepend = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const prependValue = convertToArrayPayload(value);\n    const updatedFieldArrayValues = prependAt(\n      getCurrentFieldsValues(),\n      prependValue,\n    );\n    setFieldsAndNotify(\n      updatedFieldArrayValues as Partial<\n        FieldArray<TFieldValues, TFieldArrayName>\n      >[],\n    );\n    batchStateUpdate(\n      prependAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updatedFieldArrayValues as Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    );\n    registerFieldArray(prependValue);\n\n    focusNameRef.current = getFocusFieldName(0, options);\n  };\n\n  const remove = (index?: number | number[]) => {\n    const updatedFieldArrayValues: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = removeArrayAt(getCurrentFieldsValues(), index);\n\n    setFieldsAndNotify(updatedFieldArrayValues);\n\n    batchStateUpdate(\n      removeArrayAt,\n      {\n        argA: index,\n      },\n      updatedFieldArrayValues,\n    );\n  };\n\n  const insert = (\n    index: number,\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const insertValue = convertToArrayPayload(value);\n    const updatedFieldArrayValues = insertAt(\n      getCurrentFieldsValues(),\n      index,\n      insertValue,\n    );\n    setFieldsAndNotify(\n      updatedFieldArrayValues as Partial<\n        FieldArray<TFieldValues, TFieldArrayName>\n      >[],\n    );\n    batchStateUpdate(\n      insertAt,\n      {\n        argA: index,\n        argB: fillEmptyArray(value),\n      },\n      updatedFieldArrayValues as Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    );\n    registerFieldArray(insertValue, index);\n\n    focusNameRef.current = getFocusFieldName(index, options);\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    swapArrayAt(fieldValues, indexA, indexB);\n    batchStateUpdate(\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n      },\n      fieldValues,\n      false,\n    );\n    setFieldsAndNotify(fieldValues);\n  };\n\n  const move = (from: number, to: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    moveArrayAt(fieldValues, from, to);\n    setFieldsAndNotify(fieldValues);\n    batchStateUpdate(\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n      },\n      fieldValues,\n      false,\n    );\n  };\n\n  const update = (\n    index: number,\n    value: Partial<FieldArray<TFieldValues, TFieldArrayName>>,\n  ) => {\n    setValues(\n      (name + '.' + index) as FieldPath<TFieldValues>,\n      value as UnpackNestedValue<\n        PathValue<TFieldValues, FieldPath<TFieldValues>>\n      >,\n      {\n        shouldValidate: !!readFormStateRef.current.isValid,\n        shouldDirty: !!(\n          readFormStateRef.current.dirtyFields ||\n          readFormStateRef.current.isDirty\n        ),\n      },\n    );\n\n    const fieldValues = getCurrentFieldsValues();\n    fieldValues[index] = value;\n\n    setFieldsAndNotify(fieldValues);\n  };\n\n  React.useEffect(() => {\n    inFieldArrayActionRef.current = false;\n\n    if (namesRef.current.watchAll) {\n      subjectsRef.current.state.next({});\n    } else {\n      for (const watchField of namesRef.current.watch) {\n        if (name.startsWith(watchField)) {\n          subjectsRef.current.state.next({});\n          break;\n        }\n      }\n    }\n\n    subjectsRef.current.watch.next({\n      name,\n      values: getFieldsValues(fieldsRef),\n    });\n\n    focusNameRef.current &&\n      focusFieldBy(fieldsRef.current, (key: string) =>\n        key.startsWith(focusNameRef.current),\n      );\n\n    focusNameRef.current = '';\n\n    subjectsRef.current.array.next({\n      name,\n      values: omitKey([...fields]),\n    });\n\n    readFormStateRef.current.isValid && updateIsValid();\n  }, [fields, name]);\n\n  React.useEffect(() => {\n    const fieldArraySubscription = subjectsRef.current.array.subscribe({\n      next({ name: inputFieldArrayName, values, isReset }) {\n        if (isReset) {\n          unset(fieldsRef.current, inputFieldArrayName || name);\n\n          inputFieldArrayName\n            ? set(\n                fieldArrayDefaultValuesRef.current,\n                inputFieldArrayName,\n                values,\n              )\n            : (fieldArrayDefaultValuesRef.current = values);\n\n          setFieldsAndNotify(get(fieldArrayDefaultValuesRef.current, name));\n        }\n      },\n    });\n    !get(fieldsRef.current, name) && set(fieldsRef.current, name, []);\n    isMountedRef.current = true;\n\n    return () => {\n      fieldArraySubscription.unsubscribe();\n      if (shouldUnmount || shouldUnregister) {\n        unregister(name as FieldPath<TFieldValues>);\n        unset(fieldArrayDefaultValuesRef.current, name);\n      } else {\n        const fieldArrayValues = get(getFieldsValues(fieldsRef), name);\n        fieldArrayValues &&\n          set(fieldArrayDefaultValuesRef.current, name, fieldArrayValues);\n      }\n    };\n  }, []);\n\n  return {\n    swap: React.useCallback(swap, [name]),\n    move: React.useCallback(move, [name]),\n    prepend: React.useCallback(prepend, [name]),\n    append: React.useCallback(append, [name]),\n    remove: React.useCallback(remove, [name]),\n    insert: React.useCallback(insert, [name]),\n    update: React.useCallback(update, [name]),\n    fields: fields as FieldArrayWithId<\n      TFieldValues,\n      TFieldArrayName,\n      TKeyName\n    >[],\n  };\n};\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(field?: Field) {\n  if (field && field._f) {\n    const ref = field._f.ref;\n\n    if (ref.disabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field._f.refs).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field._f.refs).value;\n    }\n\n    return getFieldValueAs(\n      isUndefined(ref.value) ? field._f.ref.value : ref.value,\n      field._f,\n    );\n  }\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  fieldsRefs: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field = get(fieldsRefs, name) as Field;\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import { RegisterOptions } from '../types';\n\nexport default <T extends RegisterOptions>(options?: T, mounted?: boolean) =>\n  mounted &&\n  options &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  {\n    _f: {\n      ref,\n      refs,\n      required,\n      maxLength,\n      minLength,\n      min,\n      max,\n      pattern,\n      validate,\n      name,\n      value: inputValue,\n      valueAsNumber,\n      mount,\n    },\n  }: Field,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  if (!mount) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidty = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidty(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidty(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidty(true);\n  return error;\n};\n","export default <T extends Function>(callback: T, wait: number) => {\n  let timer = 0;\n  return (...args: any) => {\n    clearTimeout(timer);\n    timer = setTimeout(() => callback(...args), wait);\n  };\n};\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export type Observer<T> = {\n  next: (value: T) => void;\n};\n\ntype TearDown = () => void;\n\nexport type SubjectType<T> = {\n  next: (value: T) => void;\n  subscribe: (value: Observer<T>) => {\n    unsubscribe: TearDown;\n  };\n};\n\nexport class Subscription {\n  private tearDowns: TearDown[] = [];\n\n  add(tearDown: TearDown) {\n    this.tearDowns.push(tearDown);\n  }\n\n  unsubscribe() {\n    for (const teardown of this.tearDowns) {\n      teardown();\n    }\n    this.tearDowns = [];\n  }\n}\n\nclass Subscriber<T> implements Observer<T> {\n  closed = false;\n\n  constructor(private observer: Observer<T>, subscription: Subscription) {\n    subscription.add(() => (this.closed = true));\n  }\n\n  next(value: T) {\n    if (!this.closed) {\n      this.observer.next(value);\n    }\n  }\n}\n\nexport default class Subject<T> {\n  observers: Observer<T>[];\n\n  constructor() {\n    this.observers = [];\n  }\n\n  next(value: T) {\n    for (const observer of this.observers) {\n      observer.next(value);\n    }\n  }\n\n  subscribe(observer: Observer<T>) {\n    const subscription = new Subscription();\n    const subscriber = new Subscriber(observer, subscription);\n    this.observers.push(subscriber);\n\n    return subscription;\n  }\n\n  unsubscribe() {\n    this.observers = [];\n  }\n}\n","import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport getFieldValueAs from './logic/getFieldValueAs';\nimport getNodeParentName from './logic/getNodeParentName';\nimport getProxyFormState from './logic/getProxyFormState';\nimport getResolverOptions from './logic/getResolverOptions';\nimport hasValidation from './logic/hasValidation';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport skipValidation from './logic/skipValidation';\nimport validateField from './logic/validateField';\nimport compact from './utils/compact';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport debounce from './utils/debounce';\nimport deepEqual from './utils/deepEqual';\nimport get from './utils/get';\nimport getValidationModes from './utils/getValidationModes';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isDateObject from './utils/isDateObject';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isFileInput from './utils/isFileInput';\nimport isFunction from './utils/isFunction';\nimport isHTMLElement from './utils/isHTMLElement';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isObject from './utils/isObject';\nimport isPrimitive from './utils/isPrimitive';\nimport isProxyEnabled from './utils/isProxyEnabled';\nimport isRadioInput from './utils/isRadioInput';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport isWeb from './utils/isWeb';\nimport omit from './utils/omit';\nimport set from './utils/set';\nimport Subject from './utils/Subject';\nimport unset from './utils/unset';\nimport { EVENTS, VALIDATION_MODE } from './constants';\nimport {\n  ChangeHandler,\n  DeepPartial,\n  DefaultValues,\n  Field,\n  FieldArrayDefaultValues,\n  FieldError,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  PathValue,\n  ReadFormState,\n  Ref,\n  RegisterOptions,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  ValidateHandler,\n  WatchInternal,\n  WatchObserver,\n} from './types';\n\nconst isWindowUndefined = typeof window === 'undefined';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as DefaultValues<TFieldValues>,\n  shouldFocusError = true,\n  delayError,\n  shouldUseNativeValidation,\n  shouldUnregister,\n  criteriaMode,\n}: UseFormProps<TFieldValues, TContext> = {}): UseFormReturn<TFieldValues> {\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touchedFields: !isProxyEnabled,\n    isValidating: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n    errors: !isProxyEnabled,\n  });\n  const resolverRef = React.useRef(resolver);\n  const formStateRef = React.useRef(formState);\n  const fieldsRef = React.useRef<FieldRefs>({});\n  const defaultValuesRef =\n    React.useRef<DefaultValues<TFieldValues>>(defaultValues);\n  const fieldArrayDefaultValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const contextRef = React.useRef(context);\n  const inFieldArrayActionRef = React.useRef(false);\n  const isMountedRef = React.useRef(false);\n  const _delayCallback = React.useRef<any>();\n  const subjectsRef: Subjects<TFieldValues> = React.useRef({\n    watch: new Subject(),\n    control: new Subject(),\n    array: new Subject(),\n    state: new Subject(),\n  });\n  const namesRef = React.useRef<Names>({\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n    watchAll: false,\n  });\n\n  const validationMode = getValidationModes(mode);\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  resolverRef.current = resolver;\n  contextRef.current = context;\n\n  const isFieldWatched = (name: FieldPath<TFieldValues>) =>\n    namesRef.current.watchAll ||\n    namesRef.current.watch.has(name) ||\n    namesRef.current.watch.has((name.match(/\\w+/) || [])[0]);\n\n  const updateErrorState = (name: InternalFieldName, error: FieldError) => {\n    set(formStateRef.current.errors, name, error);\n\n    subjectsRef.current.state.next({\n      errors: formStateRef.current.errors,\n    });\n  };\n\n  const shouldRenderBaseOnError = React.useCallback(\n    async (\n      shouldSkipRender: boolean,\n      name: InternalFieldName,\n      error?: FieldError,\n      fieldState?: {\n        dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      },\n      isValidFromResolver?: boolean,\n      isWatched?: boolean,\n    ): Promise<void> => {\n      const previousError = get(formStateRef.current.errors, name);\n      const isValid = readFormStateRef.current.isValid\n        ? resolver\n          ? isValidFromResolver\n          : await validateForm(fieldsRef.current, true)\n        : false;\n\n      if (delayError && error) {\n        _delayCallback.current =\n          _delayCallback.current || debounce(updateErrorState, delayError);\n\n        _delayCallback.current(name, error);\n      } else {\n        error\n          ? set(formStateRef.current.errors, name, error)\n          : unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (isWatched ||\n          (error ? !deepEqual(previousError, error, true) : previousError) ||\n          !isEmptyObject(fieldState) ||\n          formStateRef.current.isValid !== isValid) &&\n        !shouldSkipRender\n      ) {\n        const updatedFormState = {\n          ...fieldState,\n          isValid: !!isValid,\n          errors: formStateRef.current.errors,\n          name,\n        };\n\n        formStateRef.current = {\n          ...formStateRef.current,\n          ...updatedFormState,\n        };\n\n        subjectsRef.current.state.next(isWatched ? { name } : updatedFormState);\n      }\n\n      subjectsRef.current.state.next({\n        isValidating: false,\n      });\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      name: InternalFieldName,\n      rawValue: SetFieldValue<TFieldValues>,\n      options: SetValueConfig = {},\n      shouldRender?: boolean,\n      shouldRegister?: boolean,\n    ) => {\n      shouldRegister && register(name as Path<TFieldValues>);\n      const field = get(fieldsRef.current, name);\n\n      if (field) {\n        const _f = (field as Field)._f;\n\n        if (_f) {\n          const value =\n            isWeb && isHTMLElement(_f.ref) && isNullOrUndefined(rawValue)\n              ? ''\n              : rawValue;\n          _f.value = getFieldValueAs(rawValue, _f);\n\n          if (isRadioInput(_f.ref)) {\n            (_f.refs || []).forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === value),\n            );\n          } else if (isFileInput(_f.ref) && !isString(value)) {\n            _f.ref.files = value as FileList;\n          } else if (isMultipleSelect(_f.ref)) {\n            [..._f.ref.options].forEach(\n              (selectRef) =>\n                (selectRef.selected = (value as string[]).includes(\n                  selectRef.value,\n                )),\n            );\n          } else if (isCheckBoxInput(_f.ref) && _f.refs) {\n            _f.refs.length > 1\n              ? _f.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(value)\n                      ? !!(value as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : value === checkboxRef.value),\n                )\n              : (_f.refs[0].checked = !!value);\n          } else {\n            _f.ref.value = value;\n          }\n\n          if (shouldRender) {\n            const values = getFieldsValues(fieldsRef);\n            set(values, name, rawValue);\n            subjectsRef.current.control.next({\n              values: {\n                ...defaultValuesRef.current,\n                ...values,\n              } as DefaultValues<TFieldValues>,\n              name,\n            });\n          }\n\n          (options.shouldDirty || options.shouldTouch) &&\n            updateTouchAndDirtyState(name, value, options.shouldTouch);\n          options.shouldValidate && trigger(name as Path<TFieldValues>);\n        } else {\n          field._f = {\n            ref: {\n              name,\n              value: rawValue,\n            },\n            value: rawValue,\n          };\n        }\n      }\n    },\n    [],\n  );\n\n  const getIsDirty: GetIsDirty = React.useCallback((name, data) => {\n    const formValues = getFieldsValues(fieldsRef);\n\n    name && data && set(formValues, name, data);\n\n    return !deepEqual(formValues, defaultValuesRef.current);\n  }, []);\n\n  const updateTouchAndDirtyState = React.useCallback(\n    (\n      name: InternalFieldName,\n      inputValue: unknown,\n      isCurrentTouched?: boolean,\n      shouldRender = true,\n    ): Partial<\n      Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n    > => {\n      const state: Partial<FormState<TFieldValues>> & { name: string } = {\n        name,\n      };\n      let isChanged = false;\n\n      if (readFormStateRef.current.isDirty) {\n        const previousIsDirty = formStateRef.current.isDirty;\n        formStateRef.current.isDirty = getIsDirty();\n        state.isDirty = formStateRef.current.isDirty;\n        isChanged = previousIsDirty !== state.isDirty;\n      }\n\n      if (readFormStateRef.current.dirtyFields && !isCurrentTouched) {\n        const isPreviousFieldDirty = get(\n          formStateRef.current.dirtyFields,\n          name,\n        );\n        const isCurrentFieldDirty = !deepEqual(\n          get(defaultValuesRef.current, name),\n          inputValue,\n        );\n        isCurrentFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n        state.dirtyFields = formStateRef.current.dirtyFields;\n        isChanged =\n          isChanged ||\n          isPreviousFieldDirty !== get(formStateRef.current.dirtyFields, name);\n      }\n\n      const isPreviousFieldTouched = get(\n        formStateRef.current.touchedFields,\n        name,\n      );\n\n      if (isCurrentTouched && !isPreviousFieldTouched) {\n        set(formStateRef.current.touchedFields, name, isCurrentTouched);\n        state.touchedFields = formStateRef.current.touchedFields;\n        isChanged =\n          isChanged ||\n          (readFormStateRef.current.touchedFields &&\n            isPreviousFieldTouched !== isCurrentTouched);\n      }\n\n      isChanged && shouldRender && subjectsRef.current.state.next(state);\n\n      return isChanged ? state : {};\n    },\n    [],\n  );\n\n  const executeInlineValidation = React.useCallback(\n    async (\n      name: InternalFieldName,\n      skipReRender: boolean,\n    ): Promise<boolean> => {\n      const error = (\n        await validateField(\n          get(fieldsRef.current, name) as Field,\n          isValidateAllFieldCriteria,\n          shouldUseNativeValidation,\n        )\n      )[name];\n\n      await shouldRenderBaseOnError(skipReRender, name, error);\n\n      return isUndefined(error);\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const executeResolverValidation = React.useCallback(\n    async (names?: InternalFieldName[]) => {\n      const { errors } = await resolverRef.current!(\n        getFieldsValues(fieldsRef),\n        contextRef.current,\n        getResolverOptions(\n          namesRef.current.mount,\n          fieldsRef.current,\n          criteriaMode,\n          shouldUseNativeValidation,\n        ),\n      );\n\n      if (names) {\n        for (const name of names) {\n          const error = get(errors, name);\n          error\n            ? set(formStateRef.current.errors, name, error)\n            : unset(formStateRef.current.errors, name);\n        }\n      } else {\n        formStateRef.current.errors = errors;\n      }\n\n      return errors;\n    },\n    [criteriaMode, shouldUseNativeValidation],\n  );\n\n  const validateForm = async (\n    fieldsRef: FieldRefs,\n    shouldCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fieldsRef) {\n      const field = fieldsRef[name];\n\n      if (field) {\n        const _f = field._f;\n        const current = omit(field, '_f');\n\n        if (_f) {\n          const fieldError = await validateField(\n            field,\n            isValidateAllFieldCriteria,\n            shouldUseNativeValidation,\n          );\n\n          if (shouldCheckValid) {\n            if (fieldError[_f.name]) {\n              context.valid = false;\n              break;\n            }\n          } else {\n            fieldError[_f.name]\n              ? set(formStateRef.current.errors, _f.name, fieldError[_f.name])\n              : unset(formStateRef.current.errors, _f.name);\n          }\n        }\n\n        current && (await validateForm(current, shouldCheckValid, context));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = React.useCallback(\n    async (name, options = {}) => {\n      const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n      let isValid;\n\n      subjectsRef.current.state.next({\n        isValidating: true,\n      });\n\n      if (resolver) {\n        const schemaResult = await executeResolverValidation(\n          isUndefined(name) ? name : fieldNames,\n        );\n        isValid = name\n          ? fieldNames.every((name) => !get(schemaResult, name))\n          : isEmptyObject(schemaResult);\n      } else {\n        if (name) {\n          isValid = (\n            await Promise.all(\n              fieldNames\n                .filter((fieldName) => get(fieldsRef.current, fieldName, {})._f)\n                .map(\n                  async (fieldName) =>\n                    await executeInlineValidation(fieldName, true),\n                ),\n            )\n          ).every(Boolean);\n        } else {\n          await validateForm(fieldsRef.current);\n          isValid = isEmptyObject(formStateRef.current.errors);\n        }\n      }\n\n      subjectsRef.current.state.next({\n        ...(isString(name) ? { name } : {}),\n        errors: formStateRef.current.errors,\n        isValidating: false,\n      });\n\n      if (options.shouldFocus && !isValid) {\n        focusFieldBy(\n          fieldsRef.current,\n          (key) => get(formStateRef.current.errors, key),\n          name ? fieldNames : namesRef.current.mount,\n        );\n      }\n\n      readFormStateRef.current.isValid && updateIsValid();\n\n      return isValid;\n    },\n    [executeResolverValidation, executeInlineValidation],\n  );\n\n  const updateIsValidAndInputValue = (\n    name: InternalFieldName,\n    ref?: Ref,\n    shouldSkipValueAs?: boolean,\n  ) => {\n    const field = get(fieldsRef.current, name) as Field;\n\n    if (field) {\n      const isValueUndefined = isUndefined(field._f.value);\n      const defaultValue = isValueUndefined\n        ? isUndefined(get(fieldArrayDefaultValuesRef.current, name))\n          ? get(defaultValuesRef.current, name)\n          : get(fieldArrayDefaultValuesRef.current, name)\n        : field._f.value;\n\n      if (!isUndefined(defaultValue)) {\n        if (ref && (ref as HTMLInputElement).defaultChecked) {\n          field._f.value = getFieldValue(field);\n        } else if (shouldSkipValueAs) {\n          field._f.value = defaultValue;\n        } else {\n          setFieldValue(name, defaultValue);\n        }\n      } else if (isValueUndefined) {\n        field._f.value = getFieldValue(field);\n      }\n    }\n\n    isMountedRef.current && readFormStateRef.current.isValid && updateIsValid();\n  };\n\n  const updateIsValid = React.useCallback(\n    async (values = {}) => {\n      const isValid = resolver\n        ? isEmptyObject(\n            (\n              await resolverRef.current!(\n                {\n                  ...getFieldsValues(fieldsRef),\n                  ...values,\n                },\n                contextRef.current,\n                getResolverOptions(\n                  namesRef.current.mount,\n                  fieldsRef.current,\n                  criteriaMode,\n                  shouldUseNativeValidation,\n                ),\n              )\n            ).errors,\n          )\n        : await validateForm(fieldsRef.current, true);\n\n      if (isValid !== formStateRef.current.isValid) {\n        formStateRef.current.isValid = isValid;\n        subjectsRef.current.state.next({\n          isValid,\n        });\n      }\n    },\n    [criteriaMode, shouldUseNativeValidation],\n  );\n\n  const setValues = React.useCallback(\n    (\n      name: FieldPath<TFieldValues>,\n      value: UnpackNestedValue<\n        PathValue<TFieldValues, FieldPath<TFieldValues>>\n      >,\n      options: SetValueConfig,\n    ) =>\n      Object.entries(value).forEach(([fieldKey, fieldValue]) => {\n        const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n        const field = get(fieldsRef.current, fieldName);\n        const isFieldArray = namesRef.current.array.has(name);\n\n        (isFieldArray || !isPrimitive(fieldValue) || (field && !field._f)) &&\n        !isDateObject(fieldValue)\n          ? setValues(\n              fieldName,\n              fieldValue as SetFieldValue<TFieldValues>,\n              options,\n            )\n          : setFieldValue(\n              fieldName,\n              fieldValue as SetFieldValue<TFieldValues>,\n              options,\n              true,\n              !field,\n            );\n      }),\n    [trigger],\n  );\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(fieldsRef.current, name);\n    const isFieldArray = namesRef.current.array.has(name);\n\n    if (isFieldArray) {\n      subjectsRef.current.array.next({\n        values: value,\n        name,\n        isReset: true,\n      });\n\n      if (\n        (readFormStateRef.current.isDirty ||\n          readFormStateRef.current.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        set(\n          formStateRef.current.dirtyFields,\n          name,\n          setFieldArrayDirtyFields(\n            value,\n            get(defaultValuesRef.current, name, []),\n            get(formStateRef.current.dirtyFields, name, []),\n          ),\n        );\n\n        subjectsRef.current.state.next({\n          name,\n          dirtyFields: formStateRef.current.dirtyFields,\n          isDirty: getIsDirty(name, value),\n        });\n      }\n\n      !(value as []).length &&\n        set(fieldsRef.current, name, []) &&\n        set(fieldArrayDefaultValuesRef.current, name, []);\n    }\n\n    ((field && !field._f) || isFieldArray) && !isNullOrUndefined(value)\n      ? setValues(name, value, isFieldArray ? {} : options)\n      : setFieldValue(name, value, options, true, !field);\n\n    isFieldWatched(name) && subjectsRef.current.state.next({});\n    subjectsRef.current.watch.next({ name, values: getValues() });\n  };\n\n  const handleValidate: ValidateHandler = async (\n    target,\n    fieldState,\n    isWatched,\n    isBlurEvent,\n  ) => {\n    let error;\n    let isValid;\n    let name = target.name;\n    const field = get(fieldsRef.current, name) as Field;\n\n    if (resolver) {\n      const { errors } = await resolverRef.current!(\n        getFieldsValues(fieldsRef),\n        contextRef.current,\n        getResolverOptions(\n          [name],\n          fieldsRef.current,\n          criteriaMode,\n          shouldUseNativeValidation,\n        ),\n      );\n      error = get(errors, name);\n\n      if (isCheckBoxInput(target as Ref) && !error) {\n        const parentNodeName = getNodeParentName(name);\n        const currentError = get(errors, parentNodeName, {});\n        currentError.type && currentError.message && (error = currentError);\n\n        if (currentError || get(formStateRef.current.errors, parentNodeName)) {\n          name = parentNodeName;\n        }\n      }\n\n      isValid = isEmptyObject(errors);\n    } else {\n      error = (\n        await validateField(\n          field,\n          isValidateAllFieldCriteria,\n          shouldUseNativeValidation,\n        )\n      )[name];\n    }\n\n    !isBlurEvent &&\n      subjectsRef.current.watch.next({\n        name,\n        type: target.type,\n        values: getValues(),\n      });\n\n    shouldRenderBaseOnError(false, name, error, fieldState, isValid, isWatched);\n  };\n\n  const handleChange: ChangeHandler = React.useCallback(\n    async ({ type, target, target: { value, name, type: inputType } }) => {\n      const field = get(fieldsRef.current, name) as Field;\n\n      if (field) {\n        let inputValue = inputType ? getFieldValue(field) : undefined;\n        inputValue = isUndefined(inputValue) ? value : inputValue;\n\n        const isBlurEvent = type === EVENTS.BLUR;\n        const {\n          isOnBlur: isReValidateOnBlur,\n          isOnChange: isReValidateOnChange,\n        } = getValidationModes(reValidateMode);\n\n        const shouldSkipValidation =\n          (!hasValidation(field._f, field._f.mount) &&\n            !resolver &&\n            !get(formStateRef.current.errors, name)) ||\n          skipValidation({\n            isBlurEvent,\n            isTouched: !!get(formStateRef.current.touchedFields, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            isReValidateOnBlur,\n            isReValidateOnChange,\n            ...validationMode,\n          });\n        const isWatched =\n          !isBlurEvent && isFieldWatched(name as FieldPath<TFieldValues>);\n\n        if (!isUndefined(inputValue)) {\n          field._f.value = inputValue;\n        }\n\n        const fieldState = updateTouchAndDirtyState(\n          name,\n          field._f.value,\n          isBlurEvent,\n          false,\n        );\n\n        const shouldRender = !isEmptyObject(fieldState) || isWatched;\n\n        if (shouldSkipValidation) {\n          !isBlurEvent &&\n            subjectsRef.current.watch.next({\n              name,\n              type,\n              values: getValues(),\n            });\n          return (\n            shouldRender &&\n            subjectsRef.current.state.next(\n              isWatched ? { name } : { ...fieldState, name },\n            )\n          );\n        }\n\n        subjectsRef.current.state.next({\n          isValidating: true,\n        });\n\n        handleValidate(target, fieldState, isWatched, isBlurEvent);\n      }\n    },\n    [],\n  );\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ...defaultValuesRef.current,\n      ...getFieldsValues(fieldsRef),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(formStateRef.current.errors, inputName),\n        )\n      : (formStateRef.current.errors = {});\n\n    subjectsRef.current.state.next({\n      errors: formStateRef.current.errors,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = (\n      ((get(fieldsRef.current, name) as Field) || { _f: {} })._f || {}\n    ).ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    subjectsRef.current.state.next({\n      name,\n      errors: formStateRef.current.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watchInternal: WatchInternal<TFieldValues> = React.useCallback(\n    (fieldNames, defaultValue, isGlobal, formValues) => {\n      const isArrayNames = Array.isArray(fieldNames);\n      const fieldValues =\n        formValues || isMountedRef.current\n          ? {\n              ...defaultValuesRef.current,\n              ...(formValues || getFieldsValues(fieldsRef)),\n            }\n          : isUndefined(defaultValue)\n          ? defaultValuesRef.current\n          : isArrayNames\n          ? defaultValue\n          : { [fieldNames as InternalFieldName]: defaultValue };\n\n      if (isUndefined(fieldNames)) {\n        isGlobal && (namesRef.current.watchAll = true);\n        return fieldValues;\n      }\n\n      const result = [];\n\n      for (const fieldName of convertToArrayPayload(fieldNames)) {\n        isGlobal && namesRef.current.watch.add(fieldName as InternalFieldName);\n        result.push(get(fieldValues, fieldName as InternalFieldName));\n      }\n\n      return isArrayNames ? result : result[0];\n    },\n    [],\n  );\n\n  const watch: UseFormWatch<TFieldValues> = (\n    fieldName?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(fieldName)\n      ? subjectsRef.current.watch.subscribe({\n          next: (info) =>\n            fieldName(\n              watchInternal(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ) as UnpackNestedValue<TFieldValues>,\n              info,\n            ),\n        })\n      : watchInternal(\n          fieldName as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const inputName of name\n      ? convertToArrayPayload(name)\n      : namesRef.current.mount) {\n      namesRef.current.mount.delete(inputName);\n      namesRef.current.array.delete(inputName);\n\n      if (get(fieldsRef.current, inputName) as Field) {\n        !options.keepError && unset(formStateRef.current.errors, inputName);\n        !options.keepValue && unset(fieldsRef.current, inputName);\n        !options.keepDirty &&\n          unset(formStateRef.current.dirtyFields, inputName);\n        !options.keepTouched &&\n          unset(formStateRef.current.touchedFields, inputName);\n        !shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(defaultValuesRef.current, inputName);\n      }\n    }\n\n    subjectsRef.current.watch.next({\n      values: getValues(),\n    });\n\n    subjectsRef.current.state.next({\n      ...formStateRef.current,\n      ...(!options.keepDirty ? {} : { isDirty: getIsDirty() }),\n    });\n    !options.keepIsValid && updateIsValid();\n  };\n\n  const registerFieldRef = (\n    name: InternalFieldName,\n    ref: HTMLInputElement,\n    options?: RegisterOptions,\n  ): ((name: InternalFieldName) => void) | void => {\n    register(name as FieldPath<TFieldValues>, options);\n    let field = get(fieldsRef.current, name) as Field;\n\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n\n    if (\n      ref === field._f.ref ||\n      (isRadioOrCheckbox &&\n        compact(field._f.refs || []).find((option) => option === ref))\n    ) {\n      return;\n    }\n\n    field = {\n      _f: isRadioOrCheckbox\n        ? {\n            ...field._f,\n            refs: [\n              ...compact(field._f.refs || []).filter(\n                (ref) => isHTMLElement(ref) && document.contains(ref),\n              ),\n              ref,\n            ],\n            ref: { type: ref.type, name },\n          }\n        : {\n            ...field._f,\n            ref,\n          },\n    };\n\n    set(fieldsRef.current, name, field);\n\n    updateIsValidAndInputValue(name, ref);\n  };\n\n  const register: UseFormRegister<TFieldValues> = React.useCallback(\n    (name, options = {}) => {\n      const field = get(fieldsRef.current, name);\n\n      set(fieldsRef.current, name, {\n        _f: {\n          ...(field && field._f ? field._f : { ref: { name } }),\n          name,\n          mount: true,\n          ...options,\n        },\n      });\n      namesRef.current.mount.add(name);\n      !field && updateIsValidAndInputValue(name, undefined, true);\n\n      return isWindowUndefined\n        ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n        : {\n            name,\n            onChange: handleChange,\n            onBlur: handleChange,\n            ref: (ref: HTMLInputElement | null): void => {\n              if (ref) {\n                registerFieldRef(name, ref, options);\n              } else {\n                const field = get(fieldsRef.current, name, {}) as Field;\n                const shouldUnmount =\n                  shouldUnregister || options.shouldUnregister;\n\n                if (field._f) {\n                  field._f.mount = false;\n                  // If initial state of field element is disabled,\n                  // value is not set on first \"register\"\n                  // re-sync the value in when it switched to enabled\n                  if (isUndefined(field._f.value)) {\n                    field._f.value = field._f.ref.value;\n                  }\n                }\n\n                shouldUnmount &&\n                  !(\n                    isNameInFieldArray(namesRef.current.array, name) &&\n                    inFieldArrayActionRef.current\n                  ) &&\n                  namesRef.current.unMount.add(name);\n              }\n            },\n          };\n    },\n    [],\n  );\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> = React.useCallback(\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues = getFieldsValues(fieldsRef);\n\n      subjectsRef.current.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (resolver) {\n          const { errors, values } = await resolverRef.current!(\n            fieldValues,\n            contextRef.current,\n            getResolverOptions(\n              namesRef.current.mount,\n              fieldsRef.current,\n              criteriaMode,\n              shouldUseNativeValidation,\n            ),\n          );\n          formStateRef.current.errors = errors;\n          fieldValues = values;\n        } else {\n          await validateForm(fieldsRef.current);\n        }\n\n        if (\n          isEmptyObject(formStateRef.current.errors) &&\n          Object.keys(formStateRef.current.errors).every((name) =>\n            get(fieldValues, name),\n          )\n        ) {\n          subjectsRef.current.state.next({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusFieldBy(\n              fieldsRef.current,\n              (key) => get(formStateRef.current.errors, key),\n              namesRef.current.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        formStateRef.current.isSubmitted = true;\n        subjectsRef.current.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(formStateRef.current.errors) && hasNoPromiseError,\n          submitCount: formStateRef.current.submitCount + 1,\n          errors: formStateRef.current.errors,\n        });\n      }\n    },\n    [\n      shouldFocusError,\n      isValidateAllFieldCriteria,\n      criteriaMode,\n      shouldUseNativeValidation,\n    ],\n  );\n\n  const registerAbsentFields = <T extends DefaultValues<TFieldValues>>(\n    defaultValues: T,\n    name = '',\n  ): void => {\n    for (const key in defaultValues) {\n      const value = defaultValues[key];\n      const fieldName = name + (name ? '.' : '') + key;\n      const field = get(fieldsRef.current, fieldName);\n\n      if (!field || !field._f) {\n        if (isObject(value) || Array.isArray(value)) {\n          registerAbsentFields(value, fieldName);\n        } else if (!field) {\n          register(fieldName as Path<TFieldValues>, { value });\n        }\n      }\n    }\n  };\n\n  const reset: UseFormReset<TFieldValues> = (values, keepStateOptions = {}) => {\n    const updatedValues = values || defaultValuesRef.current;\n\n    if (isWeb && !keepStateOptions.keepValues) {\n      for (const name of namesRef.current.mount) {\n        const field = get(fieldsRef.current, name);\n        if (field && field._f) {\n          const inputRef = Array.isArray(field._f.refs)\n            ? field._f.refs[0]\n            : field._f.ref;\n\n          try {\n            isHTMLElement(inputRef) && inputRef.closest('form')!.reset();\n            break;\n          } catch {}\n        }\n      }\n    }\n\n    if (!keepStateOptions.keepDefaultValues) {\n      defaultValuesRef.current = { ...updatedValues };\n      fieldArrayDefaultValuesRef.current = { ...updatedValues };\n    }\n\n    if (!keepStateOptions.keepValues) {\n      fieldsRef.current = {};\n\n      subjectsRef.current.control.next({\n        values: keepStateOptions.keepDefaultValues\n          ? defaultValuesRef.current\n          : { ...updatedValues },\n      });\n\n      subjectsRef.current.watch.next({\n        values: { ...updatedValues },\n      });\n\n      subjectsRef.current.array.next({\n        values: { ...updatedValues },\n        isReset: true,\n      });\n    }\n\n    namesRef.current = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n    };\n\n    subjectsRef.current.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? formStateRef.current.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? formStateRef.current.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? deepEqual(values, defaultValuesRef.current)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? formStateRef.current.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? formStateRef.current.dirtyFields\n        : {},\n      touchedFields: keepStateOptions.keepTouched\n        ? formStateRef.current.touchedFields\n        : {},\n      errors: keepStateOptions.keepErrors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n\n    isMountedRef.current = !!keepStateOptions.keepIsValid;\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) =>\n    get(fieldsRef.current, name)._f.ref.focus();\n\n  React.useEffect(() => {\n    const formStateSubscription = subjectsRef.current.state.subscribe({\n      next(formState) {\n        if (shouldRenderFormState(formState, readFormStateRef.current, true)) {\n          formStateRef.current = {\n            ...formStateRef.current,\n            ...formState,\n          };\n          updateFormState(formStateRef.current);\n        }\n      },\n    });\n\n    const useFieldArraySubscription = subjectsRef.current.array.subscribe({\n      next(state) {\n        if (state.values && state.name && readFormStateRef.current.isValid) {\n          const values = getFieldsValues(fieldsRef);\n          set(values, state.name, state.values);\n          updateIsValid(values);\n        }\n      },\n    });\n\n    return () => {\n      formStateSubscription.unsubscribe();\n      useFieldArraySubscription.unsubscribe();\n    };\n  }, []);\n\n  React.useEffect(() => {\n    const unregisterFieldNames = [];\n    const isLiveInDom = (ref: Ref) =>\n      !isHTMLElement(ref) || !document.contains(ref);\n\n    if (!isMountedRef.current) {\n      isMountedRef.current = true;\n      readFormStateRef.current.isValid && updateIsValid();\n      !shouldUnregister && registerAbsentFields(defaultValuesRef.current);\n    }\n\n    for (const name of namesRef.current.unMount) {\n      const field = get(fieldsRef.current, name) as Field;\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every(isLiveInDom)\n          : isLiveInDom(field._f.ref)) &&\n        unregisterFieldNames.push(name);\n    }\n\n    unregisterFieldNames.length &&\n      unregister(unregisterFieldNames as FieldPath<TFieldValues>[]);\n\n    namesRef.current.unMount = new Set();\n  });\n\n  return {\n    control: React.useMemo(\n      () => ({\n        register,\n        inFieldArrayActionRef,\n        getIsDirty,\n        subjectsRef,\n        watchInternal,\n        fieldsRef,\n        updateIsValid,\n        namesRef,\n        readFormStateRef,\n        formStateRef,\n        defaultValuesRef,\n        fieldArrayDefaultValuesRef,\n        setValues,\n        unregister,\n        shouldUnmount: shouldUnregister,\n      }),\n      [],\n    ),\n    formState: getProxyFormState<TFieldValues>(\n      isProxyEnabled,\n      formState,\n      readFormStateRef,\n    ),\n    trigger,\n    register,\n    handleSubmit,\n    watch: React.useCallback(watch, []),\n    setValue: React.useCallback(setValue, [setValues]),\n    getValues: React.useCallback(getValues, []),\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    unregister: React.useCallback(unregister, []),\n    setError: React.useCallback(setError, []),\n    setFocus: React.useCallback(setFocus, []),\n  };\n}\n","import * as React from 'react';\n\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport isUndefined from './utils/isUndefined';\nimport {\n  Control,\n  DeepPartial,\n  FieldPath,\n  FieldPathValue,\n  FieldPathValues,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n  UseWatchProps,\n} from './types';\nimport { useFormContext } from './useFormContext';\n\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartial<TFieldValues>>;\n  control?: Control<TFieldValues>;\n}): UnpackNestedValue<DeepPartial<TFieldValues>>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: {\n  name: TFieldName;\n  defaultValue?: FieldPathValue<TFieldValues, TFieldName>;\n  control?: Control<TFieldValues>;\n}): FieldPathValue<TFieldValues, TFieldName>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldNames extends FieldPath<TFieldValues>[] = FieldPath<TFieldValues>[],\n>(props: {\n  name: readonly [...TFieldNames];\n  defaultValue?: UnpackNestedValue<DeepPartial<TFieldValues>>;\n  control?: Control<TFieldValues>;\n}): FieldPathValues<TFieldValues, TFieldNames>;\nexport function useWatch<TFieldValues>(props?: UseWatchProps<TFieldValues>) {\n  const { control, name, defaultValue } = props || {};\n  const methods = useFormContext();\n  const nameRef = React.useRef(name);\n  nameRef.current = name;\n\n  const { watchInternal, subjectsRef } = control || methods.control;\n  const [value, updateValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? watchInternal(name as InternalFieldName)\n      : defaultValue,\n  );\n\n  React.useEffect(() => {\n    watchInternal(name as InternalFieldName);\n\n    const watchSubscription = subjectsRef.current.watch.subscribe({\n      next: ({ name: inputName, values }) =>\n        (!nameRef.current ||\n          !inputName ||\n          convertToArrayPayload(nameRef.current).some(\n            (fieldName) =>\n              inputName &&\n              fieldName &&\n              (fieldName.startsWith(inputName as InternalFieldName) ||\n                inputName.startsWith(fieldName as InternalFieldName)),\n          )) &&\n        updateValue(\n          watchInternal(\n            nameRef.current as string,\n            defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n            false,\n            values,\n          ),\n        ),\n    });\n\n    return () => watchSubscription.unsubscribe();\n  }, []);\n\n  return value;\n}\n"]},"metadata":{},"sourceType":"module"}