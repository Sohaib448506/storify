{"ast":null,"code":"var b64Decode = require('base-64').decode;\n/**\n * Decodes a url safe Base64 string to its original representation.\n * @param  {string} string\n * @return {string}\n */\n\n\nfunction urlB64Decode(string) {\n  return string ? decodeURIComponent(escape(b64Decode(string.replace(/\\-/g, '+').replace(/\\_/g, '/')))) : '';\n}\n/**\n * Takes the header array filled with objects and transforms it into a more\n * pleasant key-value object.\n * @param  {array} headers\n * @return {object}\n */\n\n\nfunction indexHeaders(headers) {\n  if (!headers) {\n    return {};\n  } else {\n    return headers.reduce(function (result, header) {\n      result[header.name.toLowerCase()] = header.value;\n      return result;\n    }, {});\n  }\n}\n/**\n * Takes a response from the Gmail API's GET message method and extracts all\n * the relevant data.\n * @param  {object} response\n * @return {object}\n */\n\n\nmodule.exports = function parseMessage(response) {\n  var result = {\n    id: response.id,\n    threadId: response.threadId,\n    labelIds: response.labelIds,\n    snippet: response.snippet,\n    historyId: response.historyId\n  };\n\n  if (response.internalDate) {\n    result.internalDate = parseInt(response.internalDate);\n  }\n\n  var payload = response.payload;\n\n  if (!payload) {\n    return result;\n  }\n\n  var headers = indexHeaders(payload.headers);\n  result.headers = headers;\n  var parts = [payload];\n  var firstPartProcessed = false;\n\n  while (parts.length !== 0) {\n    var part = parts.shift();\n\n    if (part.parts) {\n      parts = parts.concat(part.parts);\n    }\n\n    if (firstPartProcessed) {\n      headers = indexHeaders(part.headers);\n    }\n\n    if (!part.body) {\n      continue;\n    }\n\n    var isHtml = part.mimeType && part.mimeType.indexOf('text/html') !== -1;\n    var isPlain = part.mimeType && part.mimeType.indexOf('text/plain') !== -1;\n    var isAttachment = Boolean(part.body.attachmentId || headers['content-disposition'] && headers['content-disposition'].toLowerCase().indexOf('attachment') !== -1);\n    var isInline = headers['content-disposition'] && headers['content-disposition'].toLowerCase().indexOf('inline') !== -1;\n\n    if (isHtml && !isAttachment) {\n      result.textHtml = urlB64Decode(part.body.data);\n    } else if (isPlain && !isAttachment) {\n      result.textPlain = urlB64Decode(part.body.data);\n    } else if (isAttachment) {\n      var body = part.body;\n\n      if (!result.attachments) {\n        result.attachments = [];\n      }\n\n      result.attachments.push({\n        filename: part.filename,\n        mimeType: part.mimeType,\n        size: body.size,\n        attachmentId: body.attachmentId,\n        headers: indexHeaders(part.headers)\n      });\n    } else if (isInline) {\n      var body = part.body;\n\n      if (!result.inline) {\n        result.inline = [];\n      }\n\n      result.inline.push({\n        filename: part.filename,\n        mimeType: part.mimeType,\n        size: body.size,\n        attachmentId: body.attachmentId,\n        headers: indexHeaders(part.headers)\n      });\n    }\n\n    firstPartProcessed = true;\n  }\n\n  return result;\n};","map":{"version":3,"names":["b64Decode","require","decode","urlB64Decode","string","decodeURIComponent","escape","replace","indexHeaders","headers","reduce","result","header","name","toLowerCase","value","module","exports","parseMessage","response","id","threadId","labelIds","snippet","historyId","internalDate","parseInt","payload","parts","firstPartProcessed","length","part","shift","concat","body","isHtml","mimeType","indexOf","isPlain","isAttachment","Boolean","attachmentId","isInline","textHtml","data","textPlain","attachments","push","filename","size","inline"],"sources":["/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/node_modules/gmail-api-parse-message/lib/index.js"],"sourcesContent":["var b64Decode = require('base-64').decode;\n\n/**\n * Decodes a url safe Base64 string to its original representation.\n * @param  {string} string\n * @return {string}\n */\nfunction urlB64Decode(string) {\n  return string\n   ? decodeURIComponent(escape(b64Decode(string.replace(/\\-/g, '+').replace(/\\_/g, '/'))))\n   : '';\n}\n\n/**\n * Takes the header array filled with objects and transforms it into a more\n * pleasant key-value object.\n * @param  {array} headers\n * @return {object}\n */\nfunction indexHeaders(headers) {\n  if (!headers) {\n    return {};\n  } else {\n    return headers.reduce(function (result, header) {\n      result[header.name.toLowerCase()] = header.value;\n      return result;\n    }, {});\n  }\n}\n\n/**\n * Takes a response from the Gmail API's GET message method and extracts all\n * the relevant data.\n * @param  {object} response\n * @return {object}\n */\nmodule.exports = function parseMessage(response) {\n  var result = {\n    id: response.id,\n    threadId: response.threadId,\n    labelIds: response.labelIds,\n    snippet: response.snippet,\n    historyId: response.historyId\n  };\n  if (response.internalDate) {\n    result.internalDate = parseInt(response.internalDate);\n  }\n\n  var payload = response.payload;\n  if (!payload) {\n    return result;\n  }\n\n  var headers = indexHeaders(payload.headers);\n  result.headers = headers;\n\n  var parts = [payload];\n  var firstPartProcessed = false;\n\n  while (parts.length !== 0) {\n    var part = parts.shift();\n    if (part.parts) {\n      parts = parts.concat(part.parts);\n    }\n    if (firstPartProcessed) {\n      headers = indexHeaders(part.headers);\n    }\n\n    if (!part.body) {\n      continue;\n    }\n\n    var isHtml = part.mimeType && part.mimeType.indexOf('text/html') !== -1;\n    var isPlain = part.mimeType && part.mimeType.indexOf('text/plain') !== -1;\n    var isAttachment = Boolean(part.body.attachmentId || (headers['content-disposition'] && headers['content-disposition'].toLowerCase().indexOf('attachment') !== -1));\n    var isInline = headers['content-disposition'] && headers['content-disposition'].toLowerCase().indexOf('inline') !== -1;\n\n    if (isHtml && !isAttachment) {\n      result.textHtml = urlB64Decode(part.body.data);\n    } else if (isPlain && !isAttachment) {\n      result.textPlain = urlB64Decode(part.body.data);\n    } else if (isAttachment) {\n      var body = part.body;\n      if(!result.attachments) {\n        result.attachments = [];\n      }\n      result.attachments.push({\n        filename: part.filename,\n        mimeType: part.mimeType,\n        size: body.size,\n        attachmentId: body.attachmentId,\n        headers: indexHeaders(part.headers)\n      });\n    } else if (isInline) {\n    var body = part.body;\n    if(!result.inline) {\n      result.inline = [];\n    }\n    result.inline.push({\n      filename: part.filename,\n      mimeType: part.mimeType,\n      size: body.size,\n      attachmentId: body.attachmentId,\n      headers: indexHeaders(part.headers)\n    });\n  }\n\n    firstPartProcessed = true;\n  }\n\n  return result;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}